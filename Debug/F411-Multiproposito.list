
F411-Multiproposito.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003824  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  080039bc  080039bc  000049bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b00  08003b00  000050bc  2**0
                  CONTENTS
  4 .ARM          00000008  08003b00  08003b00  00004b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b08  08003b08  000050bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b08  08003b08  00004b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b0c  08003b0c  00004b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000bc  20000000  08003b10  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002758  200000bc  08003bcc  000050bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002814  08003bcc  00005814  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000050bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010070  00000000  00000000  000050ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002751  00000000  00000000  0001515c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  000178b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ae7  00000000  00000000  00018628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187d2  00000000  00000000  0001910f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000131ad  00000000  00000000  000318e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009adfd  00000000  00000000  00044a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df88b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003984  00000000  00000000  000df8d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000e3254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000bc 	.word	0x200000bc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080039a4 	.word	0x080039a4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000c0 	.word	0x200000c0
 80001d4:	080039a4 	.word	0x080039a4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96a 	b.w	80004d4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	460c      	mov	r4, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14e      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000224:	4694      	mov	ip, r2
 8000226:	458c      	cmp	ip, r1
 8000228:	4686      	mov	lr, r0
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	d962      	bls.n	80002f6 <__udivmoddi4+0xde>
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0320 	rsb	r3, r2, #32
 8000236:	4091      	lsls	r1, r2
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	4319      	orrs	r1, r3
 8000242:	fa00 fe02 	lsl.w	lr, r0, r2
 8000246:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024a:	fa1f f68c 	uxth.w	r6, ip
 800024e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000252:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000256:	fb07 1114 	mls	r1, r7, r4, r1
 800025a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025e:	fb04 f106 	mul.w	r1, r4, r6
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f104 30ff 	add.w	r0, r4, #4294967295
 800026e:	f080 8112 	bcs.w	8000496 <__udivmoddi4+0x27e>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 810f 	bls.w	8000496 <__udivmoddi4+0x27e>
 8000278:	3c02      	subs	r4, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a59      	subs	r1, r3, r1
 800027e:	fa1f f38e 	uxth.w	r3, lr
 8000282:	fbb1 f0f7 	udiv	r0, r1, r7
 8000286:	fb07 1110 	mls	r1, r7, r0, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb00 f606 	mul.w	r6, r0, r6
 8000292:	429e      	cmp	r6, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f100 31ff 	add.w	r1, r0, #4294967295
 800029e:	f080 80fc 	bcs.w	800049a <__udivmoddi4+0x282>
 80002a2:	429e      	cmp	r6, r3
 80002a4:	f240 80f9 	bls.w	800049a <__udivmoddi4+0x282>
 80002a8:	4463      	add	r3, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	1b9b      	subs	r3, r3, r6
 80002ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa6>
 80002b6:	40d3      	lsrs	r3, r2
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xba>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb4>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa6>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x150>
 80002da:	42a3      	cmp	r3, r4
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xcc>
 80002de:	4290      	cmp	r0, r2
 80002e0:	f0c0 80f0 	bcc.w	80004c4 <__udivmoddi4+0x2ac>
 80002e4:	1a86      	subs	r6, r0, r2
 80002e6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	d0e6      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f0:	e9c5 6300 	strd	r6, r3, [r5]
 80002f4:	e7e3      	b.n	80002be <__udivmoddi4+0xa6>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x204>
 80002fc:	eba1 040c 	sub.w	r4, r1, ip
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	fa1f f78c 	uxth.w	r7, ip
 8000308:	2101      	movs	r1, #1
 800030a:	fbb4 f6f8 	udiv	r6, r4, r8
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb08 4416 	mls	r4, r8, r6, r4
 8000316:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031a:	fb07 f006 	mul.w	r0, r7, r6
 800031e:	4298      	cmp	r0, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x11c>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 34ff 	add.w	r4, r6, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x11a>
 800032c:	4298      	cmp	r0, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 8000332:	4626      	mov	r6, r4
 8000334:	1a1c      	subs	r4, r3, r0
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb4 f0f8 	udiv	r0, r4, r8
 800033e:	fb08 4410 	mls	r4, r8, r0, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb00 f707 	mul.w	r7, r0, r7
 800034a:	429f      	cmp	r7, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x148>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 34ff 	add.w	r4, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x146>
 8000358:	429f      	cmp	r7, r3
 800035a:	f200 80b0 	bhi.w	80004be <__udivmoddi4+0x2a6>
 800035e:	4620      	mov	r0, r4
 8000360:	1bdb      	subs	r3, r3, r7
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa20 fc06 	lsr.w	ip, r0, r6
 8000378:	fa04 f301 	lsl.w	r3, r4, r1
 800037c:	ea43 030c 	orr.w	r3, r3, ip
 8000380:	40f4      	lsrs	r4, r6
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	0c38      	lsrs	r0, r7, #16
 8000388:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800038c:	fbb4 fef0 	udiv	lr, r4, r0
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	fb00 441e 	mls	r4, r0, lr, r4
 8000398:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039c:	fb0e f90c 	mul.w	r9, lr, ip
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x1a6>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ae:	f080 8084 	bcs.w	80004ba <__udivmoddi4+0x2a2>
 80003b2:	45a1      	cmp	r9, r4
 80003b4:	f240 8081 	bls.w	80004ba <__udivmoddi4+0x2a2>
 80003b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003bc:	443c      	add	r4, r7
 80003be:	eba4 0409 	sub.w	r4, r4, r9
 80003c2:	fa1f f983 	uxth.w	r9, r3
 80003c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ca:	fb00 4413 	mls	r4, r0, r3, r4
 80003ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1d2>
 80003da:	193c      	adds	r4, r7, r4
 80003dc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e0:	d267      	bcs.n	80004b2 <__udivmoddi4+0x29a>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0x29a>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ee:	fba0 9302 	umull	r9, r3, r0, r2
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	429c      	cmp	r4, r3
 80003f8:	46ce      	mov	lr, r9
 80003fa:	469c      	mov	ip, r3
 80003fc:	d351      	bcc.n	80004a2 <__udivmoddi4+0x28a>
 80003fe:	d04e      	beq.n	800049e <__udivmoddi4+0x286>
 8000400:	b155      	cbz	r5, 8000418 <__udivmoddi4+0x200>
 8000402:	ebb8 030e 	subs.w	r3, r8, lr
 8000406:	eb64 040c 	sbc.w	r4, r4, ip
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	40cb      	lsrs	r3, r1
 8000410:	431e      	orrs	r6, r3
 8000412:	40cc      	lsrs	r4, r1
 8000414:	e9c5 6400 	strd	r6, r4, [r5]
 8000418:	2100      	movs	r1, #0
 800041a:	e750      	b.n	80002be <__udivmoddi4+0xa6>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f103 	lsr.w	r1, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa24 f303 	lsr.w	r3, r4, r3
 800042c:	4094      	lsls	r4, r2
 800042e:	430c      	orrs	r4, r1
 8000430:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000434:	fa00 fe02 	lsl.w	lr, r0, r2
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3110 	mls	r1, r8, r0, r3
 8000444:	0c23      	lsrs	r3, r4, #16
 8000446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044a:	fb00 f107 	mul.w	r1, r0, r7
 800044e:	4299      	cmp	r1, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x24c>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 36ff 	add.w	r6, r0, #4294967295
 800045a:	d22c      	bcs.n	80004b6 <__udivmoddi4+0x29e>
 800045c:	4299      	cmp	r1, r3
 800045e:	d92a      	bls.n	80004b6 <__udivmoddi4+0x29e>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a5b      	subs	r3, r3, r1
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb3 f1f8 	udiv	r1, r3, r8
 800046c:	fb08 3311 	mls	r3, r8, r1, r3
 8000470:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000474:	fb01 f307 	mul.w	r3, r1, r7
 8000478:	42a3      	cmp	r3, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x276>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f101 36ff 	add.w	r6, r1, #4294967295
 8000484:	d213      	bcs.n	80004ae <__udivmoddi4+0x296>
 8000486:	42a3      	cmp	r3, r4
 8000488:	d911      	bls.n	80004ae <__udivmoddi4+0x296>
 800048a:	3902      	subs	r1, #2
 800048c:	4464      	add	r4, ip
 800048e:	1ae4      	subs	r4, r4, r3
 8000490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000494:	e739      	b.n	800030a <__udivmoddi4+0xf2>
 8000496:	4604      	mov	r4, r0
 8000498:	e6f0      	b.n	800027c <__udivmoddi4+0x64>
 800049a:	4608      	mov	r0, r1
 800049c:	e706      	b.n	80002ac <__udivmoddi4+0x94>
 800049e:	45c8      	cmp	r8, r9
 80004a0:	d2ae      	bcs.n	8000400 <__udivmoddi4+0x1e8>
 80004a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	e7a8      	b.n	8000400 <__udivmoddi4+0x1e8>
 80004ae:	4631      	mov	r1, r6
 80004b0:	e7ed      	b.n	800048e <__udivmoddi4+0x276>
 80004b2:	4603      	mov	r3, r0
 80004b4:	e799      	b.n	80003ea <__udivmoddi4+0x1d2>
 80004b6:	4630      	mov	r0, r6
 80004b8:	e7d4      	b.n	8000464 <__udivmoddi4+0x24c>
 80004ba:	46d6      	mov	lr, sl
 80004bc:	e77f      	b.n	80003be <__udivmoddi4+0x1a6>
 80004be:	4463      	add	r3, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e74d      	b.n	8000360 <__udivmoddi4+0x148>
 80004c4:	4606      	mov	r6, r0
 80004c6:	4623      	mov	r3, r4
 80004c8:	4608      	mov	r0, r1
 80004ca:	e70f      	b.n	80002ec <__udivmoddi4+0xd4>
 80004cc:	3e02      	subs	r6, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	e730      	b.n	8000334 <__udivmoddi4+0x11c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <BKP_REG_blk>:
*******************************************************************************/
#include "BKP_REG.h"
#include "main.h"

int BKP_REG_blk(RTC_HandleTypeDef *RTCreg, uint8_t WR, uint8_t regs, uint32_t * data)
{
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b087      	sub	sp, #28
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	460b      	mov	r3, r1
 80004e4:	72fb      	strb	r3, [r7, #11]
 80004e6:	4613      	mov	r3, r2
 80004e8:	72bb      	strb	r3, [r7, #10]
		  if (WR == 1) HAL_PWR_EnableBkUpAccess();	//Habilito el acceso de escriura a los registros
 80004ea:	7afb      	ldrb	r3, [r7, #11]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d101      	bne.n	80004f4 <BKP_REG_blk+0x1c>
 80004f0:	f001 fd40 	bl	8001f74 <HAL_PWR_EnableBkUpAccess>

		  if (regs <= 20)
 80004f4:	7abb      	ldrb	r3, [r7, #10]
 80004f6:	2b14      	cmp	r3, #20
 80004f8:	d828      	bhi.n	800054c <BKP_REG_blk+0x74>
		  {
			for(int i=0; i<= (regs-1); i++)
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	e01a      	b.n	8000536 <BKP_REG_blk+0x5e>
				{
					if (WR==1)
 8000500:	7afb      	ldrb	r3, [r7, #11]
 8000502:	2b01      	cmp	r3, #1
 8000504:	d10a      	bne.n	800051c <BKP_REG_blk+0x44>
					{ HAL_RTCEx_BKUPWrite(RTCreg, i, data[i]); //Escritura en los registros
 8000506:	6979      	ldr	r1, [r7, #20]
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	4413      	add	r3, r2
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	461a      	mov	r2, r3
 8000514:	68f8      	ldr	r0, [r7, #12]
 8000516:	f002 fcdf 	bl	8002ed8 <HAL_RTCEx_BKUPWrite>
 800051a:	e009      	b.n	8000530 <BKP_REG_blk+0x58>
					}
					else
					{ data[i]=HAL_RTCEx_BKUPRead(RTCreg, i);	//Lectura desde los registros
 800051c:	6979      	ldr	r1, [r7, #20]
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	18d4      	adds	r4, r2, r3
 8000526:	68f8      	ldr	r0, [r7, #12]
 8000528:	f002 fcf0 	bl	8002f0c <HAL_RTCEx_BKUPRead>
 800052c:	4603      	mov	r3, r0
 800052e:	6023      	str	r3, [r4, #0]
			for(int i=0; i<= (regs-1); i++)
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	3301      	adds	r3, #1
 8000534:	617b      	str	r3, [r7, #20]
 8000536:	7abb      	ldrb	r3, [r7, #10]
 8000538:	697a      	ldr	r2, [r7, #20]
 800053a:	429a      	cmp	r2, r3
 800053c:	dbe0      	blt.n	8000500 <BKP_REG_blk+0x28>
					}
				}
			if (WR == 1)	HAL_PWR_DisableBkUpAccess();	//Deshabilito el acceso de escriura a los registros
 800053e:	7afb      	ldrb	r3, [r7, #11]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d101      	bne.n	8000548 <BKP_REG_blk+0x70>
 8000544:	f001 fd2a 	bl	8001f9c <HAL_PWR_DisableBkUpAccess>
			return(1);
 8000548:	2301      	movs	r3, #1
 800054a:	e000      	b.n	800054e <BKP_REG_blk+0x76>
		  }
		  else
		  	{return (0);}
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	371c      	adds	r7, #28
 8000552:	46bd      	mov	sp, r7
 8000554:	bd90      	pop	{r4, r7, pc}

08000556 <BKP_RG_IP>:

int BKP_RG_IP(RTC_HandleTypeDef *RTCreg, uint8_t WR, uint8_t addr, char * data)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	b08e      	sub	sp, #56	@ 0x38
 800055a:	af00      	add	r7, sp, #0
 800055c:	60f8      	str	r0, [r7, #12]
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	460b      	mov	r3, r1
 8000562:	72fb      	strb	r3, [r7, #11]
 8000564:	4613      	mov	r3, r2
 8000566:	72bb      	strb	r3, [r7, #10]
	int lng_data=0,i=0,io=0,nocteto=1;
 8000568:	2300      	movs	r3, #0
 800056a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800056c:	2300      	movs	r3, #0
 800056e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000570:	2300      	movs	r3, #0
 8000572:	633b      	str	r3, [r7, #48]	@ 0x30
 8000574:	2301      	movs	r3, #1
 8000576:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t BKP_REG=0;
 8000578:	2300      	movs	r3, #0
 800057a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t octd,octe2,octe3,octe4;
	char octc[4],oct2[4],oct3[4],oct4[4];

	lng_data=strlen(data);
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f7ff fe2b 	bl	80001d8 <strlen>
 8000582:	4603      	mov	r3, r0
 8000584:	62fb      	str	r3, [r7, #44]	@ 0x2c


	octd=0;
 8000586:	2300      	movs	r3, #0
 8000588:	623b      	str	r3, [r7, #32]
	while(*data != '.' )
 800058a:	e015      	b.n	80005b8 <BKP_RG_IP+0x62>
	{
		octc[io]=*data;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	7819      	ldrb	r1, [r3, #0]
 8000590:	f107 021c 	add.w	r2, r7, #28
 8000594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000596:	4413      	add	r3, r2
 8000598:	460a      	mov	r2, r1
 800059a:	701a      	strb	r2, [r3, #0]
		*data++;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	3301      	adds	r3, #1
 80005a0:	607b      	str	r3, [r7, #4]
		io++;
 80005a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005a4:	3301      	adds	r3, #1
 80005a6:	633b      	str	r3, [r7, #48]	@ 0x30
		i++;
 80005a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005aa:	3301      	adds	r3, #1
 80005ac:	637b      	str	r3, [r7, #52]	@ 0x34
		if(i==4) return(1); //Error en longitud de caracteres
 80005ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005b0:	2b04      	cmp	r3, #4
 80005b2:	d101      	bne.n	80005b8 <BKP_RG_IP+0x62>
 80005b4:	2301      	movs	r3, #1
 80005b6:	e0ca      	b.n	800074e <BKP_RG_IP+0x1f8>
	while(*data != '.' )
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80005be:	d1e5      	bne.n	800058c <BKP_RG_IP+0x36>
	}
	*data++;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3301      	adds	r3, #1
 80005c4:	607b      	str	r3, [r7, #4]
	i++;
 80005c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005c8:	3301      	adds	r3, #1
 80005ca:	637b      	str	r3, [r7, #52]	@ 0x34
	octc[io]='\0';
 80005cc:	f107 021c 	add.w	r2, r7, #28
 80005d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005d2:	4413      	add	r3, r2
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
	octd=atoi(octc);
 80005d8:	f107 031c 	add.w	r3, r7, #28
 80005dc:	4618      	mov	r0, r3
 80005de:	f003 f91f 	bl	8003820 <atoi>
 80005e2:	4603      	mov	r3, r0
 80005e4:	623b      	str	r3, [r7, #32]
	BKP_REG=octd;
 80005e6:	6a3b      	ldr	r3, [r7, #32]
 80005e8:	627b      	str	r3, [r7, #36]	@ 0x24

	io=0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	633b      	str	r3, [r7, #48]	@ 0x30
	while(*data != '.' )
 80005ee:	e015      	b.n	800061c <BKP_RG_IP+0xc6>
	{
		octc[io]=*data;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	7819      	ldrb	r1, [r3, #0]
 80005f4:	f107 021c 	add.w	r2, r7, #28
 80005f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005fa:	4413      	add	r3, r2
 80005fc:	460a      	mov	r2, r1
 80005fe:	701a      	strb	r2, [r3, #0]
		*data++;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3301      	adds	r3, #1
 8000604:	607b      	str	r3, [r7, #4]
		io++;
 8000606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000608:	3301      	adds	r3, #1
 800060a:	633b      	str	r3, [r7, #48]	@ 0x30
		i++;
 800060c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800060e:	3301      	adds	r3, #1
 8000610:	637b      	str	r3, [r7, #52]	@ 0x34
		if(i==4) return(1); //Error en longitud de caracteres
 8000612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000614:	2b04      	cmp	r3, #4
 8000616:	d101      	bne.n	800061c <BKP_RG_IP+0xc6>
 8000618:	2301      	movs	r3, #1
 800061a:	e098      	b.n	800074e <BKP_RG_IP+0x1f8>
	while(*data != '.' )
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b2e      	cmp	r3, #46	@ 0x2e
 8000622:	d1e5      	bne.n	80005f0 <BKP_RG_IP+0x9a>
	}
	*data++;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3301      	adds	r3, #1
 8000628:	607b      	str	r3, [r7, #4]
	i++;
 800062a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800062c:	3301      	adds	r3, #1
 800062e:	637b      	str	r3, [r7, #52]	@ 0x34
	octc[io]='\0';
 8000630:	f107 021c 	add.w	r2, r7, #28
 8000634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000636:	4413      	add	r3, r2
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
	octd=atoi(octc);
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	4618      	mov	r0, r3
 8000642:	f003 f8ed 	bl	8003820 <atoi>
 8000646:	4603      	mov	r3, r0
 8000648:	623b      	str	r3, [r7, #32]


	BKP_REG=BKP_REG<<8;
 800064a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800064c:	021b      	lsls	r3, r3, #8
 800064e:	627b      	str	r3, [r7, #36]	@ 0x24
	BKP_REG=BKP_REG | octd;
 8000650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000652:	6a3b      	ldr	r3, [r7, #32]
 8000654:	4313      	orrs	r3, r2
 8000656:	627b      	str	r3, [r7, #36]	@ 0x24

	io=0;
 8000658:	2300      	movs	r3, #0
 800065a:	633b      	str	r3, [r7, #48]	@ 0x30
	while(*data != '.' )
 800065c:	e015      	b.n	800068a <BKP_RG_IP+0x134>
	{
		octc[io]=*data;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	7819      	ldrb	r1, [r3, #0]
 8000662:	f107 021c 	add.w	r2, r7, #28
 8000666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000668:	4413      	add	r3, r2
 800066a:	460a      	mov	r2, r1
 800066c:	701a      	strb	r2, [r3, #0]
		*data++;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3301      	adds	r3, #1
 8000672:	607b      	str	r3, [r7, #4]
		io++;
 8000674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000676:	3301      	adds	r3, #1
 8000678:	633b      	str	r3, [r7, #48]	@ 0x30
		i++;
 800067a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800067c:	3301      	adds	r3, #1
 800067e:	637b      	str	r3, [r7, #52]	@ 0x34
		if(i==4) return(1); //Error en longitud de caracteres
 8000680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000682:	2b04      	cmp	r3, #4
 8000684:	d101      	bne.n	800068a <BKP_RG_IP+0x134>
 8000686:	2301      	movs	r3, #1
 8000688:	e061      	b.n	800074e <BKP_RG_IP+0x1f8>
	while(*data != '.' )
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000690:	d1e5      	bne.n	800065e <BKP_RG_IP+0x108>
	}
	*data++;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	3301      	adds	r3, #1
 8000696:	607b      	str	r3, [r7, #4]
	i++;
 8000698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800069a:	3301      	adds	r3, #1
 800069c:	637b      	str	r3, [r7, #52]	@ 0x34
	octc[io]='\0';
 800069e:	f107 021c 	add.w	r2, r7, #28
 80006a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006a4:	4413      	add	r3, r2
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
	octd=atoi(octc);
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	4618      	mov	r0, r3
 80006b0:	f003 f8b6 	bl	8003820 <atoi>
 80006b4:	4603      	mov	r3, r0
 80006b6:	623b      	str	r3, [r7, #32]


	BKP_REG=BKP_REG<<8;
 80006b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ba:	021b      	lsls	r3, r3, #8
 80006bc:	627b      	str	r3, [r7, #36]	@ 0x24
	BKP_REG=BKP_REG | octd;
 80006be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006c0:	6a3b      	ldr	r3, [r7, #32]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	627b      	str	r3, [r7, #36]	@ 0x24

	io=0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	633b      	str	r3, [r7, #48]	@ 0x30
	while(*data != '\0' )
 80006ca:	e015      	b.n	80006f8 <BKP_RG_IP+0x1a2>
	{
		octc[io]=*data;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	7819      	ldrb	r1, [r3, #0]
 80006d0:	f107 021c 	add.w	r2, r7, #28
 80006d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006d6:	4413      	add	r3, r2
 80006d8:	460a      	mov	r2, r1
 80006da:	701a      	strb	r2, [r3, #0]
		*data++;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	3301      	adds	r3, #1
 80006e0:	607b      	str	r3, [r7, #4]
		io++;
 80006e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006e4:	3301      	adds	r3, #1
 80006e6:	633b      	str	r3, [r7, #48]	@ 0x30
		i++;
 80006e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006ea:	3301      	adds	r3, #1
 80006ec:	637b      	str	r3, [r7, #52]	@ 0x34
		if(i==4) return(1); //Error en longitud de caracteres
 80006ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006f0:	2b04      	cmp	r3, #4
 80006f2:	d101      	bne.n	80006f8 <BKP_RG_IP+0x1a2>
 80006f4:	2301      	movs	r3, #1
 80006f6:	e02a      	b.n	800074e <BKP_RG_IP+0x1f8>
	while(*data != '\0' )
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d1e5      	bne.n	80006cc <BKP_RG_IP+0x176>
	}
	*data++;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3301      	adds	r3, #1
 8000704:	607b      	str	r3, [r7, #4]
	i++;
 8000706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000708:	3301      	adds	r3, #1
 800070a:	637b      	str	r3, [r7, #52]	@ 0x34
	octc[io]='\0';
 800070c:	f107 021c 	add.w	r2, r7, #28
 8000710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000712:	4413      	add	r3, r2
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
	octd=atoi(octc);
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4618      	mov	r0, r3
 800071e:	f003 f87f 	bl	8003820 <atoi>
 8000722:	4603      	mov	r3, r0
 8000724:	623b      	str	r3, [r7, #32]


	BKP_REG=BKP_REG<<8;
 8000726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000728:	021b      	lsls	r3, r3, #8
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
	BKP_REG=BKP_REG | octd;
 800072c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800072e:	6a3b      	ldr	r3, [r7, #32]
 8000730:	4313      	orrs	r3, r2
 8000732:	627b      	str	r3, [r7, #36]	@ 0x24

	if(WR==1)
 8000734:	7afb      	ldrb	r3, [r7, #11]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d109      	bne.n	800074e <BKP_RG_IP+0x1f8>
	{
		HAL_PWR_EnableBkUpAccess();
 800073a:	f001 fc1b 	bl	8001f74 <HAL_PWR_EnableBkUpAccess>
		HAL_RTCEx_BKUPWrite(RTCreg, addr, BKP_REG);
 800073e:	7abb      	ldrb	r3, [r7, #10]
 8000740:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000742:	4619      	mov	r1, r3
 8000744:	68f8      	ldr	r0, [r7, #12]
 8000746:	f002 fbc7 	bl	8002ed8 <HAL_RTCEx_BKUPWrite>
		HAL_PWR_DisableBkUpAccess();
 800074a:	f001 fc27 	bl	8001f9c <HAL_PWR_DisableBkUpAccess>

	}

}
 800074e:	4618      	mov	r0, r3
 8000750:	3738      	adds	r7, #56	@ 0x38
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000756:	b480      	push	{r7}
 8000758:	b083      	sub	sp, #12
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800075e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000762:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	2b00      	cmp	r3, #0
 800076c:	d013      	beq.n	8000796 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800076e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000772:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000776:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800077a:	2b00      	cmp	r3, #0
 800077c:	d00b      	beq.n	8000796 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800077e:	e000      	b.n	8000782 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000780:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000782:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d0f9      	beq.n	8000780 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800078c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	b2d2      	uxtb	r2, r2
 8000794:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000796:	687b      	ldr	r3, [r7, #4]
}
 8000798:	4618      	mov	r0, r3
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	  //----------------------- WIFI ------------------------//
	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 80007a8:	48cf      	ldr	r0, [pc, #828]	@ (8000ae8 <main+0x344>)
 80007aa:	f002 ff15 	bl	80035d8 <Inicializar>
	  	wf.RESET_PORT=GPIOA;
 80007ae:	4bce      	ldr	r3, [pc, #824]	@ (8000ae8 <main+0x344>)
 80007b0:	4ace      	ldr	r2, [pc, #824]	@ (8000aec <main+0x348>)
 80007b2:	601a      	str	r2, [r3, #0]
	  	wf.RESET_PIN=GPIO_PIN_8;
 80007b4:	4bcc      	ldr	r3, [pc, #816]	@ (8000ae8 <main+0x344>)
 80007b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007ba:	809a      	strh	r2, [r3, #4]
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80007bc:	49cc      	ldr	r1, [pc, #816]	@ (8000af0 <main+0x34c>)
 80007be:	48cd      	ldr	r0, [pc, #820]	@ (8000af4 <main+0x350>)
 80007c0:	f003 f8e8 	bl	8003994 <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 80007c4:	49cc      	ldr	r1, [pc, #816]	@ (8000af8 <main+0x354>)
 80007c6:	48cd      	ldr	r0, [pc, #820]	@ (8000afc <main+0x358>)
 80007c8:	f003 f8e4 	bl	8003994 <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 80007cc:	49cc      	ldr	r1, [pc, #816]	@ (8000b00 <main+0x35c>)
 80007ce:	48cd      	ldr	r0, [pc, #820]	@ (8000b04 <main+0x360>)
 80007d0:	f003 f8e0 	bl	8003994 <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 80007d4:	49cc      	ldr	r1, [pc, #816]	@ (8000b08 <main+0x364>)
 80007d6:	48cd      	ldr	r0, [pc, #820]	@ (8000b0c <main+0x368>)
 80007d8:	f003 f8dc 	bl	8003994 <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 80007dc:	49cc      	ldr	r1, [pc, #816]	@ (8000b10 <main+0x36c>)
 80007de:	48cd      	ldr	r0, [pc, #820]	@ (8000b14 <main+0x370>)
 80007e0:	f003 f8d8 	bl	8003994 <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 80007e4:	49cc      	ldr	r1, [pc, #816]	@ (8000b18 <main+0x374>)
 80007e6:	48cd      	ldr	r0, [pc, #820]	@ (8000b1c <main+0x378>)
 80007e8:	f003 f8d4 	bl	8003994 <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 80007ec:	49cc      	ldr	r1, [pc, #816]	@ (8000b20 <main+0x37c>)
 80007ee:	48cd      	ldr	r0, [pc, #820]	@ (8000b24 <main+0x380>)
 80007f0:	f003 f8d0 	bl	8003994 <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 80007f4:	49cc      	ldr	r1, [pc, #816]	@ (8000b28 <main+0x384>)
 80007f6:	48cd      	ldr	r0, [pc, #820]	@ (8000b2c <main+0x388>)
 80007f8:	f003 f8cc 	bl	8003994 <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 80007fc:	4bba      	ldr	r3, [pc, #744]	@ (8000ae8 <main+0x344>)
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 8000804:	4bb8      	ldr	r3, [pc, #736]	@ (8000ae8 <main+0x344>)
 8000806:	2264      	movs	r2, #100	@ 0x64
 8000808:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 800080c:	4bb6      	ldr	r3, [pc, #728]	@ (8000ae8 <main+0x344>)
 800080e:	2202      	movs	r2, #2
 8000810:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
		wf._NO_IP=1;
 8000814:	4bb4      	ldr	r3, [pc, #720]	@ (8000ae8 <main+0x344>)
 8000816:	2201      	movs	r2, #1
 8000818:	f8c3 2d58 	str.w	r2, [r3, #3416]	@ 0xd58
		wf._DBG_EN=1;
 800081c:	4bb2      	ldr	r3, [pc, #712]	@ (8000ae8 <main+0x344>)
 800081e:	2201      	movs	r2, #1
 8000820:	f8c3 2d5c 	str.w	r2, [r3, #3420]	@ 0xd5c
	//----------------------- WIFI ------------------------//
	//---------------------- ModBUS -----------------------//

		ModBUS_Config(&mb_lr);		//ETHERNET como cliente TCP envía  ModBUS
 8000824:	48c2      	ldr	r0, [pc, #776]	@ (8000b30 <main+0x38c>)
 8000826:	f002 ffa7 	bl	8003778 <ModBUS_Config>
		mb_lr._mode = CLIENTE;
 800082a:	4bc1      	ldr	r3, [pc, #772]	@ (8000b30 <main+0x38c>)
 800082c:	2200      	movs	r2, #0
 800082e:	711a      	strb	r2, [r3, #4]

	//---------------------- ModBUS -----------------------//
	//----------------------- ETHERNET W5100 Environment-------------------------//

	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 8000830:	4bc0      	ldr	r3, [pc, #768]	@ (8000b34 <main+0x390>)
 8000832:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000836:	22c0      	movs	r2, #192	@ 0xc0
 8000838:	771a      	strb	r2, [r3, #28]
		ETH.GAR[1]=168;
 800083a:	4bbe      	ldr	r3, [pc, #760]	@ (8000b34 <main+0x390>)
 800083c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000840:	22a8      	movs	r2, #168	@ 0xa8
 8000842:	775a      	strb	r2, [r3, #29]
		ETH.GAR[2]=0;
 8000844:	4bbb      	ldr	r3, [pc, #748]	@ (8000b34 <main+0x390>)
 8000846:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800084a:	2200      	movs	r2, #0
 800084c:	779a      	strb	r2, [r3, #30]
		ETH.GAR[3]=1;
 800084e:	4bb9      	ldr	r3, [pc, #740]	@ (8000b34 <main+0x390>)
 8000850:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000854:	2201      	movs	r2, #1
 8000856:	77da      	strb	r2, [r3, #31]
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 8000858:	4bb6      	ldr	r3, [pc, #728]	@ (8000b34 <main+0x390>)
 800085a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800085e:	22ff      	movs	r2, #255	@ 0xff
 8000860:	f883 2020 	strb.w	r2, [r3, #32]
		ETH.SUBR[1]=255;
 8000864:	4bb3      	ldr	r3, [pc, #716]	@ (8000b34 <main+0x390>)
 8000866:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800086a:	22ff      	movs	r2, #255	@ 0xff
 800086c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		ETH.SUBR[2]=255;
 8000870:	4bb0      	ldr	r3, [pc, #704]	@ (8000b34 <main+0x390>)
 8000872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000876:	22ff      	movs	r2, #255	@ 0xff
 8000878:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		ETH.SUBR[3]=0;
 800087c:	4bad      	ldr	r3, [pc, #692]	@ (8000b34 <main+0x390>)
 800087e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000882:	2200      	movs	r2, #0
 8000884:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 8000888:	4baa      	ldr	r3, [pc, #680]	@ (8000b34 <main+0x390>)
 800088a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800088e:	2200      	movs	r2, #0
 8000890:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		ETH.SHAR[1]=0x08;
 8000894:	4ba7      	ldr	r3, [pc, #668]	@ (8000b34 <main+0x390>)
 8000896:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800089a:	2208      	movs	r2, #8
 800089c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		ETH.SHAR[2]=0xDC;
 80008a0:	4ba4      	ldr	r3, [pc, #656]	@ (8000b34 <main+0x390>)
 80008a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008a6:	22dc      	movs	r2, #220	@ 0xdc
 80008a8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		ETH.SHAR[3]=0x00;
 80008ac:	4ba1      	ldr	r3, [pc, #644]	@ (8000b34 <main+0x390>)
 80008ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008b2:	2200      	movs	r2, #0
 80008b4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		ETH.SHAR[4]=0x00;
 80008b8:	4b9e      	ldr	r3, [pc, #632]	@ (8000b34 <main+0x390>)
 80008ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008be:	2200      	movs	r2, #0
 80008c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		ETH.SHAR[5]=0x01;
 80008c4:	4b9b      	ldr	r3, [pc, #620]	@ (8000b34 <main+0x390>)
 80008c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008ca:	2201      	movs	r2, #1
 80008cc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	//	IP ADDRESS
		ETH.SIPR[0]=192;
 80008d0:	4b98      	ldr	r3, [pc, #608]	@ (8000b34 <main+0x390>)
 80008d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008d6:	22c0      	movs	r2, #192	@ 0xc0
 80008d8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		ETH.SIPR[1]=168;
 80008dc:	4b95      	ldr	r3, [pc, #596]	@ (8000b34 <main+0x390>)
 80008de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008e2:	22a8      	movs	r2, #168	@ 0xa8
 80008e4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		ETH.SIPR[2]=0;
 80008e8:	4b92      	ldr	r3, [pc, #584]	@ (8000b34 <main+0x390>)
 80008ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008ee:	2200      	movs	r2, #0
 80008f0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		ETH.SIPR[3]=34;//ETH.SIPR[3]=6,
 80008f4:	4b8f      	ldr	r3, [pc, #572]	@ (8000b34 <main+0x390>)
 80008f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008fa:	2222      	movs	r2, #34	@ 0x22
 80008fc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	//  Socket RX memory
		ETH.RMSR=0x55;
 8000900:	4b8c      	ldr	r3, [pc, #560]	@ (8000b34 <main+0x390>)
 8000902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000906:	2255      	movs	r2, #85	@ 0x55
 8000908:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	//  Socket TX memory
		ETH.TMSR=0x55;
 800090c:	4b89      	ldr	r3, [pc, #548]	@ (8000b34 <main+0x390>)
 800090e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000912:	2255      	movs	r2, #85	@ 0x55
 8000914:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	//  S0 Port Number
		ETH.S0_PORT[0]=0x01;
 8000918:	4b86      	ldr	r3, [pc, #536]	@ (8000b34 <main+0x390>)
 800091a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800091e:	2201      	movs	r2, #1
 8000920:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
		ETH.S0_PORT[1]=0xF6;
 8000924:	4b83      	ldr	r3, [pc, #524]	@ (8000b34 <main+0x390>)
 8000926:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800092a:	22f6      	movs	r2, #246	@ 0xf6
 800092c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
	//	S0 Client IP ADDRESS
		ETH.S0_DIPR[0]=192;
 8000930:	4b80      	ldr	r3, [pc, #512]	@ (8000b34 <main+0x390>)
 8000932:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000936:	22c0      	movs	r2, #192	@ 0xc0
 8000938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		ETH.S0_DIPR[1]=168;
 800093c:	4b7d      	ldr	r3, [pc, #500]	@ (8000b34 <main+0x390>)
 800093e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000942:	22a8      	movs	r2, #168	@ 0xa8
 8000944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
		ETH.S0_DIPR[2]=0;
 8000948:	4b7a      	ldr	r3, [pc, #488]	@ (8000b34 <main+0x390>)
 800094a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800094e:	2200      	movs	r2, #0
 8000950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
		ETH.S0_DIPR[3]=3;//=3;
 8000954:	4b77      	ldr	r3, [pc, #476]	@ (8000b34 <main+0x390>)
 8000956:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800095a:	2203      	movs	r2, #3
 800095c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
	//	S0 Client IP Port
		ETH.S0_DPORT[0]=0x01;
 8000960:	4b74      	ldr	r3, [pc, #464]	@ (8000b34 <main+0x390>)
 8000962:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000966:	2201      	movs	r2, #1
 8000968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		ETH.S0_DPORT[1]=0xF6;
 800096c:	4b71      	ldr	r3, [pc, #452]	@ (8000b34 <main+0x390>)
 800096e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000972:	22f6      	movs	r2, #246	@ 0xf6
 8000974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

		ETH.gS0_RX_BASE = 0x6000;
 8000978:	4b6e      	ldr	r3, [pc, #440]	@ (8000b34 <main+0x390>)
 800097a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800097e:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8000982:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		ETH.gS0_RX_MASK = 0x07FF;
 8000986:	4b6b      	ldr	r3, [pc, #428]	@ (8000b34 <main+0x390>)
 8000988:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800098c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000990:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
		ETH.gS1_RX_BASE = 0x6800;
 8000994:	4b67      	ldr	r3, [pc, #412]	@ (8000b34 <main+0x390>)
 8000996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800099a:	f44f 42d0 	mov.w	r2, #26624	@ 0x6800
 800099e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
		ETH.gS1_RX_MASK = 0x07FF;
 80009a2:	4b64      	ldr	r3, [pc, #400]	@ (8000b34 <main+0x390>)
 80009a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009a8:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80009ac:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		ETH.gS2_RX_BASE = 0x7000;
 80009b0:	4b60      	ldr	r3, [pc, #384]	@ (8000b34 <main+0x390>)
 80009b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009b6:	f44f 42e0 	mov.w	r2, #28672	@ 0x7000
 80009ba:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
		ETH.gS2_RX_MASK = 0x07FF;
 80009be:	4b5d      	ldr	r3, [pc, #372]	@ (8000b34 <main+0x390>)
 80009c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009c4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80009c8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
		ETH.gS3_RX_BASE = 0x7800;
 80009cc:	4b59      	ldr	r3, [pc, #356]	@ (8000b34 <main+0x390>)
 80009ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009d2:	f44f 42f0 	mov.w	r2, #30720	@ 0x7800
 80009d6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
		ETH.gS3_RX_MASK = 0x07FF;
 80009da:	4b56      	ldr	r3, [pc, #344]	@ (8000b34 <main+0x390>)
 80009dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009e0:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80009e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
		ETH.gS0_TX_BASE = 0x4000;
 80009e8:	4b52      	ldr	r3, [pc, #328]	@ (8000b34 <main+0x390>)
 80009ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009f2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
		ETH.gS0_TX_MASK = 0x07FF;
 80009f6:	4b4f      	ldr	r3, [pc, #316]	@ (8000b34 <main+0x390>)
 80009f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009fc:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000a00:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
		ETH.gS1_TX_BASE = 0x4800;
 8000a04:	4b4b      	ldr	r3, [pc, #300]	@ (8000b34 <main+0x390>)
 8000a06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a0a:	f44f 4290 	mov.w	r2, #18432	@ 0x4800
 8000a0e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
		ETH.gS1_TX_MASK = 0x07FF;
 8000a12:	4b48      	ldr	r3, [pc, #288]	@ (8000b34 <main+0x390>)
 8000a14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a18:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000a1c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
		ETH.gS2_TX_BASE = 0x5000;
 8000a20:	4b44      	ldr	r3, [pc, #272]	@ (8000b34 <main+0x390>)
 8000a22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a26:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000a2a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
		ETH.gS2_TX_MASK = 0x07FF;
 8000a2e:	4b41      	ldr	r3, [pc, #260]	@ (8000b34 <main+0x390>)
 8000a30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a34:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000a38:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
		ETH.gS3_TX_BASE = 0x5800;
 8000a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b34 <main+0x390>)
 8000a3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a42:	f44f 42b0 	mov.w	r2, #22528	@ 0x5800
 8000a46:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
		ETH.gS3_TX_MASK = 0x07FF;
 8000a4a:	4b3a      	ldr	r3, [pc, #232]	@ (8000b34 <main+0x390>)
 8000a4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a50:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000a54:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

		ETH.S0_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 8000a58:	4b36      	ldr	r3, [pc, #216]	@ (8000b34 <main+0x390>)
 8000a5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a64:	f000 fd1e 	bl	80014a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a68:	f000 f886 	bl	8000b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6c:	f000 fa4e 	bl	8000f0c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a70:	f000 f8ec 	bl	8000c4c <MX_ADC1_Init>
  MX_SPI3_Init();
 8000a74:	f000 f996 	bl	8000da4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000a78:	f000 f9ca 	bl	8000e10 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a7c:	f000 f9f2 	bl	8000e64 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000a80:	f000 fa1a 	bl	8000eb8 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8000a84:	f000 f934 	bl	8000cf0 <MX_RTC_Init>

  /* USER CODE BEGIN 2 */
  ITM0_Write("\r\n ARRANQUE",strlen("\r\n ARRANQUE"));
 8000a88:	210b      	movs	r1, #11
 8000a8a:	482b      	ldr	r0, [pc, #172]	@ (8000b38 <main+0x394>)
 8000a8c:	f000 fada 	bl	8001044 <ITM0_Write>

  dataRTC[3]=128;
 8000a90:	4b2a      	ldr	r3, [pc, #168]	@ (8000b3c <main+0x398>)
 8000a92:	2280      	movs	r2, #128	@ 0x80
 8000a94:	60da      	str	r2, [r3, #12]
  BKP_REG_blk(&hrtc, WRITE , 20, dataRTC );
 8000a96:	4b29      	ldr	r3, [pc, #164]	@ (8000b3c <main+0x398>)
 8000a98:	2214      	movs	r2, #20
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	4828      	ldr	r0, [pc, #160]	@ (8000b40 <main+0x39c>)
 8000a9e:	f7ff fd1b 	bl	80004d8 <BKP_REG_blk>
  dataRTC[3]=0;
 8000aa2:	4b26      	ldr	r3, [pc, #152]	@ (8000b3c <main+0x398>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  BKP_REG_blk(&hrtc, READ , 20, dataRTC );
 8000aa8:	4b24      	ldr	r3, [pc, #144]	@ (8000b3c <main+0x398>)
 8000aaa:	2214      	movs	r2, #20
 8000aac:	2100      	movs	r1, #0
 8000aae:	4824      	ldr	r0, [pc, #144]	@ (8000b40 <main+0x39c>)
 8000ab0:	f7ff fd12 	bl	80004d8 <BKP_REG_blk>

  BKP_REG_blk(&hrtc, READ , 20, dataRTC );
 8000ab4:	4b21      	ldr	r3, [pc, #132]	@ (8000b3c <main+0x398>)
 8000ab6:	2214      	movs	r2, #20
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4821      	ldr	r0, [pc, #132]	@ (8000b40 <main+0x39c>)
 8000abc:	f7ff fd0c 	bl	80004d8 <BKP_REG_blk>

  BKP_RG_IP(&hrtc, WRITE, 0, TCP_SERVER);
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <main+0x35c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	481e      	ldr	r0, [pc, #120]	@ (8000b40 <main+0x39c>)
 8000ac8:	f7ff fd45 	bl	8000556 <BKP_RG_IP>
  BKP_RG_IP(&hrtc, WRITE, 1, TCP_SERVER_LOCAL);
 8000acc:	4b10      	ldr	r3, [pc, #64]	@ (8000b10 <main+0x36c>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	481b      	ldr	r0, [pc, #108]	@ (8000b40 <main+0x39c>)
 8000ad4:	f7ff fd3f 	bl	8000556 <BKP_RG_IP>
  BKP_RG_IP(&hrtc, WRITE, 2, TCP_SERVER_LOCAL_GWY);
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <main+0x374>)
 8000ada:	2202      	movs	r2, #2
 8000adc:	2101      	movs	r1, #1
 8000ade:	4818      	ldr	r0, [pc, #96]	@ (8000b40 <main+0x39c>)
 8000ae0:	f7ff fd39 	bl	8000556 <BKP_RG_IP>
 8000ae4:	e02e      	b.n	8000b44 <main+0x3a0>
 8000ae6:	bf00      	nop
 8000ae8:	20000270 	.word	0x20000270
 8000aec:	40020000 	.word	0x40020000
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000276 	.word	0x20000276
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000296 	.word	0x20000296
 8000b00:	20000014 	.word	0x20000014
 8000b04:	200002a6 	.word	0x200002a6
 8000b08:	20000024 	.word	0x20000024
 8000b0c:	200002b6 	.word	0x200002b6
 8000b10:	2000002c 	.word	0x2000002c
 8000b14:	200002bc 	.word	0x200002bc
 8000b18:	2000003c 	.word	0x2000003c
 8000b1c:	200002d2 	.word	0x200002d2
 8000b20:	2000004c 	.word	0x2000004c
 8000b24:	200002e2 	.word	0x200002e2
 8000b28:	2000005c 	.word	0x2000005c
 8000b2c:	200002cc 	.word	0x200002cc
 8000b30:	20002038 	.word	0x20002038
 8000b34:	20000fd0 	.word	0x20000fd0
 8000b38:	080039bc 	.word	0x080039bc
 8000b3c:	20002688 	.word	0x20002688
 8000b40:	20000120 	.word	0x20000120
  BKP_RG_IP(&hrtc, WRITE, 3, TCP_SERVER_LOCAL_MSK);
 8000b44:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <main+0x3c4>)
 8000b46:	2203      	movs	r2, #3
 8000b48:	2101      	movs	r1, #1
 8000b4a:	4808      	ldr	r0, [pc, #32]	@ (8000b6c <main+0x3c8>)
 8000b4c:	f7ff fd03 	bl	8000556 <BKP_RG_IP>

  if(dataRTC[3]==128)
 8000b50:	4b07      	ldr	r3, [pc, #28]	@ (8000b70 <main+0x3cc>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	2b80      	cmp	r3, #128	@ 0x80
 8000b56:	d104      	bne.n	8000b62 <main+0x3be>
  {
	  ITM0_Write("\r\n Valor guardado en RTC ",strlen("\r\n Valor guardado en RTC "));
 8000b58:	2119      	movs	r1, #25
 8000b5a:	4806      	ldr	r0, [pc, #24]	@ (8000b74 <main+0x3d0>)
 8000b5c:	f000 fa72 	bl	8001044 <ITM0_Write>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	bf00      	nop
 8000b64:	e7fd      	b.n	8000b62 <main+0x3be>
 8000b66:	bf00      	nop
 8000b68:	2000004c 	.word	0x2000004c
 8000b6c:	20000120 	.word	0x20000120
 8000b70:	20002688 	.word	0x20002688
 8000b74:	080039c8 	.word	0x080039c8

08000b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b094      	sub	sp, #80	@ 0x50
 8000b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7e:	f107 0320 	add.w	r3, r7, #32
 8000b82:	2230      	movs	r2, #48	@ 0x30
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f002 fed2 	bl	8003930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b8c:	f107 030c 	add.w	r3, r7, #12
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	4b28      	ldr	r3, [pc, #160]	@ (8000c44 <SystemClock_Config+0xcc>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba4:	4a27      	ldr	r2, [pc, #156]	@ (8000c44 <SystemClock_Config+0xcc>)
 8000ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000baa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bac:	4b25      	ldr	r3, [pc, #148]	@ (8000c44 <SystemClock_Config+0xcc>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb8:	2300      	movs	r3, #0
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	4b22      	ldr	r3, [pc, #136]	@ (8000c48 <SystemClock_Config+0xd0>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a21      	ldr	r2, [pc, #132]	@ (8000c48 <SystemClock_Config+0xd0>)
 8000bc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c48 <SystemClock_Config+0xd0>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000bd4:	230a      	movs	r3, #10
 8000bd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bdc:	2310      	movs	r3, #16
 8000bde:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000be0:	2301      	movs	r3, #1
 8000be2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be4:	2302      	movs	r3, #2
 8000be6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000be8:	2300      	movs	r3, #0
 8000bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bec:	2308      	movs	r3, #8
 8000bee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000bf0:	2364      	movs	r3, #100	@ 0x64
 8000bf2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfc:	f107 0320 	add.w	r3, r7, #32
 8000c00:	4618      	mov	r0, r3
 8000c02:	f001 f9df 	bl	8001fc4 <HAL_RCC_OscConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c0c:	f000 fa35 	bl	800107a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c10:	230f      	movs	r3, #15
 8000c12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c14:	2302      	movs	r3, #2
 8000c16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	2103      	movs	r1, #3
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f001 fc41 	bl	80024b4 <HAL_RCC_ClockConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c38:	f000 fa1f 	bl	800107a <Error_Handler>
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	3750      	adds	r7, #80	@ 0x50
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40007000 	.word	0x40007000

08000c4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c52:	463b      	mov	r3, r7
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000c60:	4a21      	ldr	r2, [pc, #132]	@ (8000ce8 <MX_ADC1_Init+0x9c>)
 8000c62:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000c66:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c6a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c86:	4b17      	ldr	r3, [pc, #92]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000c8e:	4a17      	ldr	r2, [pc, #92]	@ (8000cec <MX_ADC1_Init+0xa0>)
 8000c90:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c92:	4b14      	ldr	r3, [pc, #80]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c98:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cac:	480d      	ldr	r0, [pc, #52]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000cae:	f000 fc6b 	bl	8001588 <HAL_ADC_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000cb8:	f000 f9df 	bl	800107a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cbc:	2304      	movs	r3, #4
 8000cbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc8:	463b      	mov	r3, r7
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000cce:	f000 fc9f 	bl	8001610 <HAL_ADC_ConfigChannel>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000cd8:	f000 f9cf 	bl	800107a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	200000d8 	.word	0x200000d8
 8000ce8:	40012000 	.word	0x40012000
 8000cec:	0f000001 	.word	0x0f000001

08000cf0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000d04:	2300      	movs	r3, #0
 8000d06:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d08:	4b24      	ldr	r3, [pc, #144]	@ (8000d9c <MX_RTC_Init+0xac>)
 8000d0a:	4a25      	ldr	r2, [pc, #148]	@ (8000da0 <MX_RTC_Init+0xb0>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d0e:	4b23      	ldr	r3, [pc, #140]	@ (8000d9c <MX_RTC_Init+0xac>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d14:	4b21      	ldr	r3, [pc, #132]	@ (8000d9c <MX_RTC_Init+0xac>)
 8000d16:	227f      	movs	r2, #127	@ 0x7f
 8000d18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d1a:	4b20      	ldr	r3, [pc, #128]	@ (8000d9c <MX_RTC_Init+0xac>)
 8000d1c:	22ff      	movs	r2, #255	@ 0xff
 8000d1e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d20:	4b1e      	ldr	r3, [pc, #120]	@ (8000d9c <MX_RTC_Init+0xac>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d26:	4b1d      	ldr	r3, [pc, #116]	@ (8000d9c <MX_RTC_Init+0xac>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d9c <MX_RTC_Init+0xac>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d32:	481a      	ldr	r0, [pc, #104]	@ (8000d9c <MX_RTC_Init+0xac>)
 8000d34:	f001 fe8e 	bl	8002a54 <HAL_RTC_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000d3e:	f000 f99c 	bl	800107a <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2201      	movs	r2, #1
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480f      	ldr	r0, [pc, #60]	@ (8000d9c <MX_RTC_Init+0xac>)
 8000d5e:	f001 fefc 	bl	8002b5a <HAL_RTC_SetTime>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000d68:	f000 f987 	bl	800107a <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000d70:	2301      	movs	r3, #1
 8000d72:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000d74:	2301      	movs	r3, #1
 8000d76:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	2201      	movs	r2, #1
 8000d80:	4619      	mov	r1, r3
 8000d82:	4806      	ldr	r0, [pc, #24]	@ (8000d9c <MX_RTC_Init+0xac>)
 8000d84:	f001 ff83 	bl	8002c8e <HAL_RTC_SetDate>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000d8e:	f000 f974 	bl	800107a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000120 	.word	0x20000120
 8000da0:	40002800 	.word	0x40002800

08000da4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000da8:	4b17      	ldr	r3, [pc, #92]	@ (8000e08 <MX_SPI3_Init+0x64>)
 8000daa:	4a18      	ldr	r2, [pc, #96]	@ (8000e0c <MX_SPI3_Init+0x68>)
 8000dac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000dae:	4b16      	ldr	r3, [pc, #88]	@ (8000e08 <MX_SPI3_Init+0x64>)
 8000db0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000db4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000db6:	4b14      	ldr	r3, [pc, #80]	@ (8000e08 <MX_SPI3_Init+0x64>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	@ (8000e08 <MX_SPI3_Init+0x64>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <MX_SPI3_Init+0x64>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e08 <MX_SPI3_Init+0x64>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	@ (8000e08 <MX_SPI3_Init+0x64>)
 8000dd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dd4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <MX_SPI3_Init+0x64>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8000e08 <MX_SPI3_Init+0x64>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000de2:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <MX_SPI3_Init+0x64>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000de8:	4b07      	ldr	r3, [pc, #28]	@ (8000e08 <MX_SPI3_Init+0x64>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000dee:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <MX_SPI3_Init+0x64>)
 8000df0:	220a      	movs	r2, #10
 8000df2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000df4:	4804      	ldr	r0, [pc, #16]	@ (8000e08 <MX_SPI3_Init+0x64>)
 8000df6:	f002 f8a1 	bl	8002f3c <HAL_SPI_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000e00:	f000 f93b 	bl	800107a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000140 	.word	0x20000140
 8000e0c:	40003c00 	.word	0x40003c00

08000e10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e14:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <MX_USART1_UART_Init+0x4c>)
 8000e16:	4a12      	ldr	r2, [pc, #72]	@ (8000e60 <MX_USART1_UART_Init+0x50>)
 8000e18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e1a:	4b10      	ldr	r3, [pc, #64]	@ (8000e5c <MX_USART1_UART_Init+0x4c>)
 8000e1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <MX_USART1_UART_Init+0x4c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	@ (8000e5c <MX_USART1_UART_Init+0x4c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e5c <MX_USART1_UART_Init+0x4c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e34:	4b09      	ldr	r3, [pc, #36]	@ (8000e5c <MX_USART1_UART_Init+0x4c>)
 8000e36:	220c      	movs	r2, #12
 8000e38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e3a:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <MX_USART1_UART_Init+0x4c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <MX_USART1_UART_Init+0x4c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e46:	4805      	ldr	r0, [pc, #20]	@ (8000e5c <MX_USART1_UART_Init+0x4c>)
 8000e48:	f002 f901 	bl	800304e <HAL_UART_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e52:	f000 f912 	bl	800107a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000198 	.word	0x20000198
 8000e60:	40011000 	.word	0x40011000

08000e64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e68:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e6a:	4a12      	ldr	r2, [pc, #72]	@ (8000eb4 <MX_USART2_UART_Init+0x50>)
 8000e6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e6e:	4b10      	ldr	r3, [pc, #64]	@ (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e88:	4b09      	ldr	r3, [pc, #36]	@ (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	@ (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e9a:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e9c:	f002 f8d7 	bl	800304e <HAL_UART_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ea6:	f000 f8e8 	bl	800107a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200001e0 	.word	0x200001e0
 8000eb4:	40004400 	.word	0x40004400

08000eb8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <MX_USART6_UART_Init+0x4c>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	@ (8000f08 <MX_USART6_UART_Init+0x50>)
 8000ec0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000ec2:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <MX_USART6_UART_Init+0x4c>)
 8000ec4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ec8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	@ (8000f04 <MX_USART6_UART_Init+0x4c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <MX_USART6_UART_Init+0x4c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <MX_USART6_UART_Init+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000edc:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <MX_USART6_UART_Init+0x4c>)
 8000ede:	220c      	movs	r2, #12
 8000ee0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <MX_USART6_UART_Init+0x4c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <MX_USART6_UART_Init+0x4c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000eee:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <MX_USART6_UART_Init+0x4c>)
 8000ef0:	f002 f8ad 	bl	800304e <HAL_UART_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000efa:	f000 f8be 	bl	800107a <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000228 	.word	0x20000228
 8000f08:	40011400 	.word	0x40011400

08000f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	@ 0x28
 8000f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	4b43      	ldr	r3, [pc, #268]	@ (8001034 <MX_GPIO_Init+0x128>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	4a42      	ldr	r2, [pc, #264]	@ (8001034 <MX_GPIO_Init+0x128>)
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f32:	4b40      	ldr	r3, [pc, #256]	@ (8001034 <MX_GPIO_Init+0x128>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b3c      	ldr	r3, [pc, #240]	@ (8001034 <MX_GPIO_Init+0x128>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	4a3b      	ldr	r2, [pc, #236]	@ (8001034 <MX_GPIO_Init+0x128>)
 8000f48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4e:	4b39      	ldr	r3, [pc, #228]	@ (8001034 <MX_GPIO_Init+0x128>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	4b35      	ldr	r3, [pc, #212]	@ (8001034 <MX_GPIO_Init+0x128>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	4a34      	ldr	r2, [pc, #208]	@ (8001034 <MX_GPIO_Init+0x128>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6a:	4b32      	ldr	r3, [pc, #200]	@ (8001034 <MX_GPIO_Init+0x128>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	4b2e      	ldr	r3, [pc, #184]	@ (8001034 <MX_GPIO_Init+0x128>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a2d      	ldr	r2, [pc, #180]	@ (8001034 <MX_GPIO_Init+0x128>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f86:	4b2b      	ldr	r3, [pc, #172]	@ (8001034 <MX_GPIO_Init+0x128>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Q0_0_GPIO_Port, Q0_0_Pin, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f98:	4827      	ldr	r0, [pc, #156]	@ (8001038 <MX_GPIO_Init+0x12c>)
 8000f9a:	f000 ffd1 	bl	8001f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Q0_1_Pin|MBUS_CTRL_Pin|WF_EN_RST_Pin|DBG_PIN_Pin, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f248 1103 	movw	r1, #33027	@ 0x8103
 8000fa4:	4825      	ldr	r0, [pc, #148]	@ (800103c <MX_GPIO_Init+0x130>)
 8000fa6:	f000 ffcb 	bl	8001f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FALLA_Pin|CNN_Pin|ALIM_Pin|ETH_NSS_Pin
 8000faa:	2200      	movs	r2, #0
 8000fac:	f24e 21c0 	movw	r1, #58048	@ 0xe2c0
 8000fb0:	4823      	ldr	r0, [pc, #140]	@ (8001040 <MX_GPIO_Init+0x134>)
 8000fb2:	f000 ffc5 	bl	8001f40 <HAL_GPIO_WritePin>
                          |ETH_RST_Pin|LR_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Q0_0_Pin */
  GPIO_InitStruct.Pin = Q0_0_Pin;
 8000fb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Q0_0_GPIO_Port, &GPIO_InitStruct);
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4619      	mov	r1, r3
 8000fce:	481a      	ldr	r0, [pc, #104]	@ (8001038 <MX_GPIO_Init+0x12c>)
 8000fd0:	f000 fe32 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : Q0_1_Pin MBUS_CTRL_Pin WF_EN_RST_Pin DBG_PIN_Pin */
  GPIO_InitStruct.Pin = Q0_1_Pin|MBUS_CTRL_Pin|WF_EN_RST_Pin|DBG_PIN_Pin;
 8000fd4:	f248 1303 	movw	r3, #33027	@ 0x8103
 8000fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	4813      	ldr	r0, [pc, #76]	@ (800103c <MX_GPIO_Init+0x130>)
 8000fee:	f000 fe23 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : A3V3_Pin A5V_Pin IA0_Pin IA1_Pin */
  GPIO_InitStruct.Pin = A3V3_Pin|A5V_Pin|IA0_Pin|IA1_Pin;
 8000ff2:	f240 4307 	movw	r3, #1031	@ 0x407
 8000ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	4619      	mov	r1, r3
 8001006:	480e      	ldr	r0, [pc, #56]	@ (8001040 <MX_GPIO_Init+0x134>)
 8001008:	f000 fe16 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : FALLA_Pin CNN_Pin ALIM_Pin ETH_NSS_Pin
                           ETH_RST_Pin LR_RST_Pin */
  GPIO_InitStruct.Pin = FALLA_Pin|CNN_Pin|ALIM_Pin|ETH_NSS_Pin
 800100c:	f24e 23c0 	movw	r3, #58048	@ 0xe2c0
 8001010:	617b      	str	r3, [r7, #20]
                          |ETH_RST_Pin|LR_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001012:	2301      	movs	r3, #1
 8001014:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	4806      	ldr	r0, [pc, #24]	@ (8001040 <MX_GPIO_Init+0x134>)
 8001026:	f000 fe07 	bl	8001c38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800102a:	bf00      	nop
 800102c:	3728      	adds	r7, #40	@ 0x28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800
 8001038:	40020800 	.word	0x40020800
 800103c:	40020000 	.word	0x40020000
 8001040:	40020400 	.word	0x40020400

08001044 <ITM0_Write>:

/* USER CODE BEGIN 4 */

int ITM0_Write( char *ptr, int len)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	e009      	b.n	8001068 <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fb7a 	bl	8000756 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3301      	adds	r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	dbf1      	blt.n	8001054 <ITM0_Write+0x10>
  }
  return len;
 8001070:	683b      	ldr	r3, [r7, #0]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800107e:	b672      	cpsid	i
}
 8001080:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001082:	bf00      	nop
 8001084:	e7fd      	b.n	8001082 <Error_Handler+0x8>
	...

08001088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	4b10      	ldr	r3, [pc, #64]	@ (80010d4 <HAL_MspInit+0x4c>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001096:	4a0f      	ldr	r2, [pc, #60]	@ (80010d4 <HAL_MspInit+0x4c>)
 8001098:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800109c:	6453      	str	r3, [r2, #68]	@ 0x44
 800109e:	4b0d      	ldr	r3, [pc, #52]	@ (80010d4 <HAL_MspInit+0x4c>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <HAL_MspInit+0x4c>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b2:	4a08      	ldr	r2, [pc, #32]	@ (80010d4 <HAL_MspInit+0x4c>)
 80010b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ba:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <HAL_MspInit+0x4c>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800

080010d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	@ 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a17      	ldr	r2, [pc, #92]	@ (8001154 <HAL_ADC_MspInit+0x7c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d127      	bne.n	800114a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <HAL_ADC_MspInit+0x80>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001102:	4a15      	ldr	r2, [pc, #84]	@ (8001158 <HAL_ADC_MspInit+0x80>)
 8001104:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001108:	6453      	str	r3, [r2, #68]	@ 0x44
 800110a:	4b13      	ldr	r3, [pc, #76]	@ (8001158 <HAL_ADC_MspInit+0x80>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <HAL_ADC_MspInit+0x80>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	4a0e      	ldr	r2, [pc, #56]	@ (8001158 <HAL_ADC_MspInit+0x80>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6313      	str	r3, [r2, #48]	@ 0x30
 8001126:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <HAL_ADC_MspInit+0x80>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001132:	23f0      	movs	r3, #240	@ 0xf0
 8001134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001136:	2303      	movs	r3, #3
 8001138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	@ (800115c <HAL_ADC_MspInit+0x84>)
 8001146:	f000 fd77 	bl	8001c38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800114a:	bf00      	nop
 800114c:	3728      	adds	r7, #40	@ 0x28
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40012000 	.word	0x40012000
 8001158:	40023800 	.word	0x40023800
 800115c:	40020000 	.word	0x40020000

08001160 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001168:	f107 0308 	add.w	r3, r7, #8
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
 8001178:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a0c      	ldr	r2, [pc, #48]	@ (80011b0 <HAL_RTC_MspInit+0x50>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d111      	bne.n	80011a8 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001184:	2302      	movs	r3, #2
 8001186:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001188:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800118c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800118e:	f107 0308 	add.w	r3, r7, #8
 8001192:	4618      	mov	r0, r3
 8001194:	f001 fb6e 	bl	8002874 <HAL_RCCEx_PeriphCLKConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800119e:	f7ff ff6c 	bl	800107a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011a2:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <HAL_RTC_MspInit+0x54>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80011a8:	bf00      	nop
 80011aa:	3720      	adds	r7, #32
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40002800 	.word	0x40002800
 80011b4:	42470e3c 	.word	0x42470e3c

080011b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	@ 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a21      	ldr	r2, [pc, #132]	@ (800125c <HAL_SPI_MspInit+0xa4>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d13c      	bne.n	8001254 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	4b20      	ldr	r3, [pc, #128]	@ (8001260 <HAL_SPI_MspInit+0xa8>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001260 <HAL_SPI_MspInit+0xa8>)
 80011e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001260 <HAL_SPI_MspInit+0xa8>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <HAL_SPI_MspInit+0xa8>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	4a18      	ldr	r2, [pc, #96]	@ (8001260 <HAL_SPI_MspInit+0xa8>)
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	6313      	str	r3, [r2, #48]	@ 0x30
 8001206:	4b16      	ldr	r3, [pc, #88]	@ (8001260 <HAL_SPI_MspInit+0xa8>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB12     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = ETH_SCK_Pin;
 8001212:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001224:	2307      	movs	r3, #7
 8001226:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ETH_SCK_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	480d      	ldr	r0, [pc, #52]	@ (8001264 <HAL_SPI_MspInit+0xac>)
 8001230:	f000 fd02 	bl	8001c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MISO_Pin|ETH_MOSI_Pin;
 8001234:	2330      	movs	r3, #48	@ 0x30
 8001236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001244:	2306      	movs	r3, #6
 8001246:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4805      	ldr	r0, [pc, #20]	@ (8001264 <HAL_SPI_MspInit+0xac>)
 8001250:	f000 fcf2 	bl	8001c38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001254:	bf00      	nop
 8001256:	3728      	adds	r7, #40	@ 0x28
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40003c00 	.word	0x40003c00
 8001260:	40023800 	.word	0x40023800
 8001264:	40020400 	.word	0x40020400

08001268 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08e      	sub	sp, #56	@ 0x38
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a4c      	ldr	r2, [pc, #304]	@ (80013b8 <HAL_UART_MspInit+0x150>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d12d      	bne.n	80012e6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
 800128e:	4b4b      	ldr	r3, [pc, #300]	@ (80013bc <HAL_UART_MspInit+0x154>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001292:	4a4a      	ldr	r2, [pc, #296]	@ (80013bc <HAL_UART_MspInit+0x154>)
 8001294:	f043 0310 	orr.w	r3, r3, #16
 8001298:	6453      	str	r3, [r2, #68]	@ 0x44
 800129a:	4b48      	ldr	r3, [pc, #288]	@ (80013bc <HAL_UART_MspInit+0x154>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129e:	f003 0310 	and.w	r3, r3, #16
 80012a2:	623b      	str	r3, [r7, #32]
 80012a4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
 80012aa:	4b44      	ldr	r3, [pc, #272]	@ (80013bc <HAL_UART_MspInit+0x154>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a43      	ldr	r2, [pc, #268]	@ (80013bc <HAL_UART_MspInit+0x154>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b41      	ldr	r3, [pc, #260]	@ (80013bc <HAL_UART_MspInit+0x154>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = WIFI_TX_Pin|WIFI_RX_Pin;
 80012c2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80012c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012d4:	2307      	movs	r3, #7
 80012d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012dc:	4619      	mov	r1, r3
 80012de:	4838      	ldr	r0, [pc, #224]	@ (80013c0 <HAL_UART_MspInit+0x158>)
 80012e0:	f000 fcaa 	bl	8001c38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80012e4:	e063      	b.n	80013ae <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART2)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a36      	ldr	r2, [pc, #216]	@ (80013c4 <HAL_UART_MspInit+0x15c>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d12c      	bne.n	800134a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80012f0:	2300      	movs	r3, #0
 80012f2:	61bb      	str	r3, [r7, #24]
 80012f4:	4b31      	ldr	r3, [pc, #196]	@ (80013bc <HAL_UART_MspInit+0x154>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f8:	4a30      	ldr	r2, [pc, #192]	@ (80013bc <HAL_UART_MspInit+0x154>)
 80012fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001300:	4b2e      	ldr	r3, [pc, #184]	@ (80013bc <HAL_UART_MspInit+0x154>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001308:	61bb      	str	r3, [r7, #24]
 800130a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	4b2a      	ldr	r3, [pc, #168]	@ (80013bc <HAL_UART_MspInit+0x154>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	4a29      	ldr	r2, [pc, #164]	@ (80013bc <HAL_UART_MspInit+0x154>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6313      	str	r3, [r2, #48]	@ 0x30
 800131c:	4b27      	ldr	r3, [pc, #156]	@ (80013bc <HAL_UART_MspInit+0x154>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MBUS_TX_Pin|MBUS_RX_Pin;
 8001328:	230c      	movs	r3, #12
 800132a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001338:	2307      	movs	r3, #7
 800133a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001340:	4619      	mov	r1, r3
 8001342:	481f      	ldr	r0, [pc, #124]	@ (80013c0 <HAL_UART_MspInit+0x158>)
 8001344:	f000 fc78 	bl	8001c38 <HAL_GPIO_Init>
}
 8001348:	e031      	b.n	80013ae <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART6)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a1e      	ldr	r2, [pc, #120]	@ (80013c8 <HAL_UART_MspInit+0x160>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d12c      	bne.n	80013ae <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001354:	2300      	movs	r3, #0
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	4b18      	ldr	r3, [pc, #96]	@ (80013bc <HAL_UART_MspInit+0x154>)
 800135a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135c:	4a17      	ldr	r2, [pc, #92]	@ (80013bc <HAL_UART_MspInit+0x154>)
 800135e:	f043 0320 	orr.w	r3, r3, #32
 8001362:	6453      	str	r3, [r2, #68]	@ 0x44
 8001364:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <HAL_UART_MspInit+0x154>)
 8001366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001368:	f003 0320 	and.w	r3, r3, #32
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <HAL_UART_MspInit+0x154>)
 8001376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001378:	4a10      	ldr	r2, [pc, #64]	@ (80013bc <HAL_UART_MspInit+0x154>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001380:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <HAL_UART_MspInit+0x154>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 800138c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800139e:	2308      	movs	r3, #8
 80013a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	@ (80013c0 <HAL_UART_MspInit+0x158>)
 80013aa:	f000 fc45 	bl	8001c38 <HAL_GPIO_Init>
}
 80013ae:	bf00      	nop
 80013b0:	3738      	adds	r7, #56	@ 0x38
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40011000 	.word	0x40011000
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020000 	.word	0x40020000
 80013c4:	40004400 	.word	0x40004400
 80013c8:	40011400 	.word	0x40011400

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <NMI_Handler+0x4>

080013d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <HardFault_Handler+0x4>

080013dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <MemManage_Handler+0x4>

080013e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <BusFault_Handler+0x4>

080013ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <UsageFault_Handler+0x4>

080013f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001422:	f000 f891 	bl	8001548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <SystemInit+0x20>)
 8001432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001436:	4a05      	ldr	r2, [pc, #20]	@ (800144c <SystemInit+0x20>)
 8001438:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800143c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001450:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001488 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001454:	f7ff ffea 	bl	800142c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001458:	480c      	ldr	r0, [pc, #48]	@ (800148c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800145a:	490d      	ldr	r1, [pc, #52]	@ (8001490 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800145c:	4a0d      	ldr	r2, [pc, #52]	@ (8001494 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001460:	e002      	b.n	8001468 <LoopCopyDataInit>

08001462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001466:	3304      	adds	r3, #4

08001468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800146c:	d3f9      	bcc.n	8001462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146e:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001470:	4c0a      	ldr	r4, [pc, #40]	@ (800149c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001474:	e001      	b.n	800147a <LoopFillZerobss>

08001476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001478:	3204      	adds	r2, #4

0800147a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800147c:	d3fb      	bcc.n	8001476 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800147e:	f002 fa65 	bl	800394c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001482:	f7ff f98f 	bl	80007a4 <main>
  bx  lr    
 8001486:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001488:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800148c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001490:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8001494:	08003b10 	.word	0x08003b10
  ldr r2, =_sbss
 8001498:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 800149c:	20002814 	.word	0x20002814

080014a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014a0:	e7fe      	b.n	80014a0 <ADC_IRQHandler>
	...

080014a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014a8:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <HAL_Init+0x40>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a0d      	ldr	r2, [pc, #52]	@ (80014e4 <HAL_Init+0x40>)
 80014ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014b4:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <HAL_Init+0x40>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0a      	ldr	r2, [pc, #40]	@ (80014e4 <HAL_Init+0x40>)
 80014ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c0:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <HAL_Init+0x40>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a07      	ldr	r2, [pc, #28]	@ (80014e4 <HAL_Init+0x40>)
 80014c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014cc:	2003      	movs	r0, #3
 80014ce:	f000 fb7f 	bl	8001bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d2:	200f      	movs	r0, #15
 80014d4:	f000 f808 	bl	80014e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d8:	f7ff fdd6 	bl	8001088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40023c00 	.word	0x40023c00

080014e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f0:	4b12      	ldr	r3, [pc, #72]	@ (800153c <HAL_InitTick+0x54>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <HAL_InitTick+0x58>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001502:	fbb2 f3f3 	udiv	r3, r2, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f000 fb89 	bl	8001c1e <HAL_SYSTICK_Config>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e00e      	b.n	8001534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b0f      	cmp	r3, #15
 800151a:	d80a      	bhi.n	8001532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800151c:	2200      	movs	r2, #0
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	f000 fb5f 	bl	8001be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001528:	4a06      	ldr	r2, [pc, #24]	@ (8001544 <HAL_InitTick+0x5c>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	e000      	b.n	8001534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000060 	.word	0x20000060
 8001540:	20000068 	.word	0x20000068
 8001544:	20000064 	.word	0x20000064

08001548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <HAL_IncTick+0x20>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <HAL_IncTick+0x24>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4413      	add	r3, r2
 8001558:	4a04      	ldr	r2, [pc, #16]	@ (800156c <HAL_IncTick+0x24>)
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000068 	.word	0x20000068
 800156c:	200026d8 	.word	0x200026d8

08001570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return uwTick;
 8001574:	4b03      	ldr	r3, [pc, #12]	@ (8001584 <HAL_GetTick+0x14>)
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	200026d8 	.word	0x200026d8

08001588 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e033      	b.n	8001606 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d109      	bne.n	80015ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fd96 	bl	80010d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d118      	bne.n	80015f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80015ce:	f023 0302 	bic.w	r3, r3, #2
 80015d2:	f043 0202 	orr.w	r2, r3, #2
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 f94a 	bl	8001874 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ea:	f023 0303 	bic.w	r3, r3, #3
 80015ee:	f043 0201 	orr.w	r2, r3, #1
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80015f6:	e001      	b.n	80015fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001604:	7bfb      	ldrb	r3, [r7, #15]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800161a:	2300      	movs	r3, #0
 800161c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_ADC_ConfigChannel+0x1c>
 8001628:	2302      	movs	r3, #2
 800162a:	e113      	b.n	8001854 <HAL_ADC_ConfigChannel+0x244>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b09      	cmp	r3, #9
 800163a:	d925      	bls.n	8001688 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68d9      	ldr	r1, [r3, #12]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	b29b      	uxth	r3, r3
 8001648:	461a      	mov	r2, r3
 800164a:	4613      	mov	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	3b1e      	subs	r3, #30
 8001652:	2207      	movs	r2, #7
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43da      	mvns	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	400a      	ands	r2, r1
 8001660:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68d9      	ldr	r1, [r3, #12]
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	b29b      	uxth	r3, r3
 8001672:	4618      	mov	r0, r3
 8001674:	4603      	mov	r3, r0
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	4403      	add	r3, r0
 800167a:	3b1e      	subs	r3, #30
 800167c:	409a      	lsls	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	e022      	b.n	80016ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6919      	ldr	r1, [r3, #16]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	461a      	mov	r2, r3
 8001696:	4613      	mov	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	4413      	add	r3, r2
 800169c:	2207      	movs	r2, #7
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43da      	mvns	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	400a      	ands	r2, r1
 80016aa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6919      	ldr	r1, [r3, #16]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	4618      	mov	r0, r3
 80016be:	4603      	mov	r3, r0
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4403      	add	r3, r0
 80016c4:	409a      	lsls	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d824      	bhi.n	8001720 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	3b05      	subs	r3, #5
 80016e8:	221f      	movs	r2, #31
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43da      	mvns	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	400a      	ands	r2, r1
 80016f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	b29b      	uxth	r3, r3
 8001704:	4618      	mov	r0, r3
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	3b05      	subs	r3, #5
 8001712:	fa00 f203 	lsl.w	r2, r0, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	635a      	str	r2, [r3, #52]	@ 0x34
 800171e:	e04c      	b.n	80017ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b0c      	cmp	r3, #12
 8001726:	d824      	bhi.n	8001772 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	3b23      	subs	r3, #35	@ 0x23
 800173a:	221f      	movs	r2, #31
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43da      	mvns	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	400a      	ands	r2, r1
 8001748:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	b29b      	uxth	r3, r3
 8001756:	4618      	mov	r0, r3
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	3b23      	subs	r3, #35	@ 0x23
 8001764:	fa00 f203 	lsl.w	r2, r0, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001770:	e023      	b.n	80017ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	3b41      	subs	r3, #65	@ 0x41
 8001784:	221f      	movs	r2, #31
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43da      	mvns	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	400a      	ands	r2, r1
 8001792:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	4618      	mov	r0, r3
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	3b41      	subs	r3, #65	@ 0x41
 80017ae:	fa00 f203 	lsl.w	r2, r0, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017ba:	4b29      	ldr	r3, [pc, #164]	@ (8001860 <HAL_ADC_ConfigChannel+0x250>)
 80017bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a28      	ldr	r2, [pc, #160]	@ (8001864 <HAL_ADC_ConfigChannel+0x254>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d10f      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x1d8>
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b12      	cmp	r3, #18
 80017ce:	d10b      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001864 <HAL_ADC_ConfigChannel+0x254>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d12b      	bne.n	800184a <HAL_ADC_ConfigChannel+0x23a>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001868 <HAL_ADC_ConfigChannel+0x258>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d003      	beq.n	8001804 <HAL_ADC_ConfigChannel+0x1f4>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b11      	cmp	r3, #17
 8001802:	d122      	bne.n	800184a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a11      	ldr	r2, [pc, #68]	@ (8001868 <HAL_ADC_ConfigChannel+0x258>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d111      	bne.n	800184a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001826:	4b11      	ldr	r3, [pc, #68]	@ (800186c <HAL_ADC_ConfigChannel+0x25c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a11      	ldr	r2, [pc, #68]	@ (8001870 <HAL_ADC_ConfigChannel+0x260>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9a      	lsrs	r2, r3, #18
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800183c:	e002      	b.n	8001844 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	3b01      	subs	r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f9      	bne.n	800183e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	40012300 	.word	0x40012300
 8001864:	40012000 	.word	0x40012000
 8001868:	10000012 	.word	0x10000012
 800186c:	20000060 	.word	0x20000060
 8001870:	431bde83 	.word	0x431bde83

08001874 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800187c:	4b79      	ldr	r3, [pc, #484]	@ (8001a64 <ADC_Init+0x1f0>)
 800187e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	431a      	orrs	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6859      	ldr	r1, [r3, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	021a      	lsls	r2, r3, #8
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80018cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6859      	ldr	r1, [r3, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6899      	ldr	r1, [r3, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001906:	4a58      	ldr	r2, [pc, #352]	@ (8001a68 <ADC_Init+0x1f4>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d022      	beq.n	8001952 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800191a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6899      	ldr	r1, [r3, #8]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800193c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6899      	ldr	r1, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	e00f      	b.n	8001972 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001960:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001970:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 0202 	bic.w	r2, r2, #2
 8001980:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6899      	ldr	r1, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	7e1b      	ldrb	r3, [r3, #24]
 800198c:	005a      	lsls	r2, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 3020 	ldrb.w	r3, [r3, #32]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d01b      	beq.n	80019d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019ae:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80019be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6859      	ldr	r1, [r3, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ca:	3b01      	subs	r3, #1
 80019cc:	035a      	lsls	r2, r3, #13
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	430a      	orrs	r2, r1
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	e007      	b.n	80019e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019e6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80019f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	051a      	lsls	r2, r3, #20
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001a1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6899      	ldr	r1, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a2a:	025a      	lsls	r2, r3, #9
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6899      	ldr	r1, [r3, #8]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	029a      	lsls	r2, r3, #10
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	609a      	str	r2, [r3, #8]
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	40012300 	.word	0x40012300
 8001a68:	0f000001 	.word	0x0f000001

08001a6c <__NVIC_SetPriorityGrouping>:
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9e:	4a04      	ldr	r2, [pc, #16]	@ (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	60d3      	str	r3, [r2, #12]
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_GetPriorityGrouping>:
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab8:	4b04      	ldr	r3, [pc, #16]	@ (8001acc <__NVIC_GetPriorityGrouping+0x18>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	f003 0307 	and.w	r3, r3, #7
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <__NVIC_SetPriority>:
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	db0a      	blt.n	8001afa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	490c      	ldr	r1, [pc, #48]	@ (8001b1c <__NVIC_SetPriority+0x4c>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	440b      	add	r3, r1
 8001af4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001af8:	e00a      	b.n	8001b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4908      	ldr	r1, [pc, #32]	@ (8001b20 <__NVIC_SetPriority+0x50>)
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	3b04      	subs	r3, #4
 8001b08:	0112      	lsls	r2, r2, #4
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	761a      	strb	r2, [r3, #24]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000e100 	.word	0xe000e100
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <NVIC_EncodePriority>:
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	@ 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f1c3 0307 	rsb	r3, r3, #7
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	bf28      	it	cs
 8001b42:	2304      	movcs	r3, #4
 8001b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	2b06      	cmp	r3, #6
 8001b4c:	d902      	bls.n	8001b54 <NVIC_EncodePriority+0x30>
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3b03      	subs	r3, #3
 8001b52:	e000      	b.n	8001b56 <NVIC_EncodePriority+0x32>
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43da      	mvns	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	401a      	ands	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43d9      	mvns	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	4313      	orrs	r3, r2
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3724      	adds	r7, #36	@ 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <SysTick_Config>:
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b9c:	d301      	bcc.n	8001ba2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00f      	b.n	8001bc2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bcc <SysTick_Config+0x40>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001baa:	210f      	movs	r1, #15
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f7ff ff8e 	bl	8001ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb4:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <SysTick_Config+0x40>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bba:	4b04      	ldr	r3, [pc, #16]	@ (8001bcc <SysTick_Config+0x40>)
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	e000e010 	.word	0xe000e010

08001bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ff47 	bl	8001a6c <__NVIC_SetPriorityGrouping>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf8:	f7ff ff5c 	bl	8001ab4 <__NVIC_GetPriorityGrouping>
 8001bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	6978      	ldr	r0, [r7, #20]
 8001c04:	f7ff ff8e 	bl	8001b24 <NVIC_EncodePriority>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff5d 	bl	8001ad0 <__NVIC_SetPriority>
}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ffb0 	bl	8001b8c <SysTick_Config>
 8001c2c:	4603      	mov	r3, r0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b089      	sub	sp, #36	@ 0x24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
 8001c52:	e159      	b.n	8001f08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c54:	2201      	movs	r2, #1
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	4013      	ands	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	f040 8148 	bne.w	8001f02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d005      	beq.n	8001c8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d130      	bne.n	8001cec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	2203      	movs	r2, #3
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	091b      	lsrs	r3, r3, #4
 8001cd6:	f003 0201 	and.w	r2, r3, #1
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	d017      	beq.n	8001d28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	2203      	movs	r2, #3
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d123      	bne.n	8001d7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	08da      	lsrs	r2, r3, #3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3208      	adds	r2, #8
 8001d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	220f      	movs	r2, #15
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	08da      	lsrs	r2, r3, #3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3208      	adds	r2, #8
 8001d76:	69b9      	ldr	r1, [r7, #24]
 8001d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	2203      	movs	r2, #3
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0203 	and.w	r2, r3, #3
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80a2 	beq.w	8001f02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b57      	ldr	r3, [pc, #348]	@ (8001f20 <HAL_GPIO_Init+0x2e8>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc6:	4a56      	ldr	r2, [pc, #344]	@ (8001f20 <HAL_GPIO_Init+0x2e8>)
 8001dc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dce:	4b54      	ldr	r3, [pc, #336]	@ (8001f20 <HAL_GPIO_Init+0x2e8>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dda:	4a52      	ldr	r2, [pc, #328]	@ (8001f24 <HAL_GPIO_Init+0x2ec>)
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	089b      	lsrs	r3, r3, #2
 8001de0:	3302      	adds	r3, #2
 8001de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	220f      	movs	r2, #15
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a49      	ldr	r2, [pc, #292]	@ (8001f28 <HAL_GPIO_Init+0x2f0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d019      	beq.n	8001e3a <HAL_GPIO_Init+0x202>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a48      	ldr	r2, [pc, #288]	@ (8001f2c <HAL_GPIO_Init+0x2f4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d013      	beq.n	8001e36 <HAL_GPIO_Init+0x1fe>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a47      	ldr	r2, [pc, #284]	@ (8001f30 <HAL_GPIO_Init+0x2f8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d00d      	beq.n	8001e32 <HAL_GPIO_Init+0x1fa>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a46      	ldr	r2, [pc, #280]	@ (8001f34 <HAL_GPIO_Init+0x2fc>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d007      	beq.n	8001e2e <HAL_GPIO_Init+0x1f6>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a45      	ldr	r2, [pc, #276]	@ (8001f38 <HAL_GPIO_Init+0x300>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d101      	bne.n	8001e2a <HAL_GPIO_Init+0x1f2>
 8001e26:	2304      	movs	r3, #4
 8001e28:	e008      	b.n	8001e3c <HAL_GPIO_Init+0x204>
 8001e2a:	2307      	movs	r3, #7
 8001e2c:	e006      	b.n	8001e3c <HAL_GPIO_Init+0x204>
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e004      	b.n	8001e3c <HAL_GPIO_Init+0x204>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e002      	b.n	8001e3c <HAL_GPIO_Init+0x204>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <HAL_GPIO_Init+0x204>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	69fa      	ldr	r2, [r7, #28]
 8001e3e:	f002 0203 	and.w	r2, r2, #3
 8001e42:	0092      	lsls	r2, r2, #2
 8001e44:	4093      	lsls	r3, r2
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e4c:	4935      	ldr	r1, [pc, #212]	@ (8001f24 <HAL_GPIO_Init+0x2ec>)
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	089b      	lsrs	r3, r3, #2
 8001e52:	3302      	adds	r3, #2
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e5a:	4b38      	ldr	r3, [pc, #224]	@ (8001f3c <HAL_GPIO_Init+0x304>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e7e:	4a2f      	ldr	r2, [pc, #188]	@ (8001f3c <HAL_GPIO_Init+0x304>)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e84:	4b2d      	ldr	r3, [pc, #180]	@ (8001f3c <HAL_GPIO_Init+0x304>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ea8:	4a24      	ldr	r2, [pc, #144]	@ (8001f3c <HAL_GPIO_Init+0x304>)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eae:	4b23      	ldr	r3, [pc, #140]	@ (8001f3c <HAL_GPIO_Init+0x304>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ed2:	4a1a      	ldr	r2, [pc, #104]	@ (8001f3c <HAL_GPIO_Init+0x304>)
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ed8:	4b18      	ldr	r3, [pc, #96]	@ (8001f3c <HAL_GPIO_Init+0x304>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001efc:	4a0f      	ldr	r2, [pc, #60]	@ (8001f3c <HAL_GPIO_Init+0x304>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3301      	adds	r3, #1
 8001f06:	61fb      	str	r3, [r7, #28]
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	2b0f      	cmp	r3, #15
 8001f0c:	f67f aea2 	bls.w	8001c54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f10:	bf00      	nop
 8001f12:	bf00      	nop
 8001f14:	3724      	adds	r7, #36	@ 0x24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40013800 	.word	0x40013800
 8001f28:	40020000 	.word	0x40020000
 8001f2c:	40020400 	.word	0x40020400
 8001f30:	40020800 	.word	0x40020800
 8001f34:	40020c00 	.word	0x40020c00
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40013c00 	.word	0x40013c00

08001f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	807b      	strh	r3, [r7, #2]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f50:	787b      	ldrb	r3, [r7, #1]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f56:	887a      	ldrh	r2, [r7, #2]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f5c:	e003      	b.n	8001f66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f5e:	887b      	ldrh	r3, [r7, #2]
 8001f60:	041a      	lsls	r2, r3, #16
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	619a      	str	r2, [r3, #24]
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001f7a:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <HAL_PWR_EnableBkUpAccess+0x20>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8001f80:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <HAL_PWR_EnableBkUpAccess+0x24>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8001f86:	687b      	ldr	r3, [r7, #4]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	420e0020 	.word	0x420e0020
 8001f98:	40007000 	.word	0x40007000

08001f9c <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8001fa2:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <HAL_PWR_DisableBkUpAccess+0x20>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8001fa8:	4b05      	ldr	r3, [pc, #20]	@ (8001fc0 <HAL_PWR_DisableBkUpAccess+0x24>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8001fae:	687b      	ldr	r3, [r7, #4]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	420e0020 	.word	0x420e0020
 8001fc0:	40007000 	.word	0x40007000

08001fc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e267      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d075      	beq.n	80020ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fe2:	4b88      	ldr	r3, [pc, #544]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d00c      	beq.n	8002008 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fee:	4b85      	ldr	r3, [pc, #532]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d112      	bne.n	8002020 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ffa:	4b82      	ldr	r3, [pc, #520]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002002:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002006:	d10b      	bne.n	8002020 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	4b7e      	ldr	r3, [pc, #504]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d05b      	beq.n	80020cc <HAL_RCC_OscConfig+0x108>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d157      	bne.n	80020cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e242      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002028:	d106      	bne.n	8002038 <HAL_RCC_OscConfig+0x74>
 800202a:	4b76      	ldr	r3, [pc, #472]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a75      	ldr	r2, [pc, #468]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	e01d      	b.n	8002074 <HAL_RCC_OscConfig+0xb0>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002040:	d10c      	bne.n	800205c <HAL_RCC_OscConfig+0x98>
 8002042:	4b70      	ldr	r3, [pc, #448]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a6f      	ldr	r2, [pc, #444]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002048:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	4b6d      	ldr	r3, [pc, #436]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a6c      	ldr	r2, [pc, #432]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e00b      	b.n	8002074 <HAL_RCC_OscConfig+0xb0>
 800205c:	4b69      	ldr	r3, [pc, #420]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a68      	ldr	r2, [pc, #416]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	4b66      	ldr	r3, [pc, #408]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a65      	ldr	r2, [pc, #404]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 800206e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002072:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d013      	beq.n	80020a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7ff fa78 	bl	8001570 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002084:	f7ff fa74 	bl	8001570 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b64      	cmp	r3, #100	@ 0x64
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e207      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002096:	4b5b      	ldr	r3, [pc, #364]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0xc0>
 80020a2:	e014      	b.n	80020ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7ff fa64 	bl	8001570 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020ac:	f7ff fa60 	bl	8001570 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	@ 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e1f3      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020be:	4b51      	ldr	r3, [pc, #324]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0xe8>
 80020ca:	e000      	b.n	80020ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d063      	beq.n	80021a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020da:	4b4a      	ldr	r3, [pc, #296]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00b      	beq.n	80020fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020e6:	4b47      	ldr	r3, [pc, #284]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d11c      	bne.n	800212c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020f2:	4b44      	ldr	r3, [pc, #272]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d116      	bne.n	800212c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fe:	4b41      	ldr	r3, [pc, #260]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d005      	beq.n	8002116 <HAL_RCC_OscConfig+0x152>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d001      	beq.n	8002116 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e1c7      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002116:	4b3b      	ldr	r3, [pc, #236]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4937      	ldr	r1, [pc, #220]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002126:	4313      	orrs	r3, r2
 8002128:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212a:	e03a      	b.n	80021a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d020      	beq.n	8002176 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002134:	4b34      	ldr	r3, [pc, #208]	@ (8002208 <HAL_RCC_OscConfig+0x244>)
 8002136:	2201      	movs	r2, #1
 8002138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213a:	f7ff fa19 	bl	8001570 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002142:	f7ff fa15 	bl	8001570 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e1a8      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002154:	4b2b      	ldr	r3, [pc, #172]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f0      	beq.n	8002142 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002160:	4b28      	ldr	r3, [pc, #160]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	4925      	ldr	r1, [pc, #148]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002170:	4313      	orrs	r3, r2
 8002172:	600b      	str	r3, [r1, #0]
 8002174:	e015      	b.n	80021a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002176:	4b24      	ldr	r3, [pc, #144]	@ (8002208 <HAL_RCC_OscConfig+0x244>)
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217c:	f7ff f9f8 	bl	8001570 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002184:	f7ff f9f4 	bl	8001570 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e187      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002196:	4b1b      	ldr	r3, [pc, #108]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d036      	beq.n	800221c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d016      	beq.n	80021e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021b6:	4b15      	ldr	r3, [pc, #84]	@ (800220c <HAL_RCC_OscConfig+0x248>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021bc:	f7ff f9d8 	bl	8001570 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021c4:	f7ff f9d4 	bl	8001570 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e167      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 80021d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0x200>
 80021e2:	e01b      	b.n	800221c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021e4:	4b09      	ldr	r3, [pc, #36]	@ (800220c <HAL_RCC_OscConfig+0x248>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ea:	f7ff f9c1 	bl	8001570 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f0:	e00e      	b.n	8002210 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021f2:	f7ff f9bd 	bl	8001570 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d907      	bls.n	8002210 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e150      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
 8002204:	40023800 	.word	0x40023800
 8002208:	42470000 	.word	0x42470000
 800220c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002210:	4b88      	ldr	r3, [pc, #544]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 8002212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1ea      	bne.n	80021f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 8097 	beq.w	8002358 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800222a:	2300      	movs	r3, #0
 800222c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800222e:	4b81      	ldr	r3, [pc, #516]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10f      	bne.n	800225a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	4b7d      	ldr	r3, [pc, #500]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	4a7c      	ldr	r2, [pc, #496]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 8002244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002248:	6413      	str	r3, [r2, #64]	@ 0x40
 800224a:	4b7a      	ldr	r3, [pc, #488]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002256:	2301      	movs	r3, #1
 8002258:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225a:	4b77      	ldr	r3, [pc, #476]	@ (8002438 <HAL_RCC_OscConfig+0x474>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002262:	2b00      	cmp	r3, #0
 8002264:	d118      	bne.n	8002298 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002266:	4b74      	ldr	r3, [pc, #464]	@ (8002438 <HAL_RCC_OscConfig+0x474>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a73      	ldr	r2, [pc, #460]	@ (8002438 <HAL_RCC_OscConfig+0x474>)
 800226c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002272:	f7ff f97d 	bl	8001570 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227a:	f7ff f979 	bl	8001570 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e10c      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228c:	4b6a      	ldr	r3, [pc, #424]	@ (8002438 <HAL_RCC_OscConfig+0x474>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0f0      	beq.n	800227a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d106      	bne.n	80022ae <HAL_RCC_OscConfig+0x2ea>
 80022a0:	4b64      	ldr	r3, [pc, #400]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 80022a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a4:	4a63      	ldr	r2, [pc, #396]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 80022a6:	f043 0301 	orr.w	r3, r3, #1
 80022aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ac:	e01c      	b.n	80022e8 <HAL_RCC_OscConfig+0x324>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b05      	cmp	r3, #5
 80022b4:	d10c      	bne.n	80022d0 <HAL_RCC_OscConfig+0x30c>
 80022b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 80022b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ba:	4a5e      	ldr	r2, [pc, #376]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 80022bc:	f043 0304 	orr.w	r3, r3, #4
 80022c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80022c2:	4b5c      	ldr	r3, [pc, #368]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 80022c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c6:	4a5b      	ldr	r2, [pc, #364]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ce:	e00b      	b.n	80022e8 <HAL_RCC_OscConfig+0x324>
 80022d0:	4b58      	ldr	r3, [pc, #352]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 80022d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d4:	4a57      	ldr	r2, [pc, #348]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 80022d6:	f023 0301 	bic.w	r3, r3, #1
 80022da:	6713      	str	r3, [r2, #112]	@ 0x70
 80022dc:	4b55      	ldr	r3, [pc, #340]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 80022de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e0:	4a54      	ldr	r2, [pc, #336]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 80022e2:	f023 0304 	bic.w	r3, r3, #4
 80022e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d015      	beq.n	800231c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f0:	f7ff f93e 	bl	8001570 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f6:	e00a      	b.n	800230e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f8:	f7ff f93a 	bl	8001570 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002306:	4293      	cmp	r3, r2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e0cb      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230e:	4b49      	ldr	r3, [pc, #292]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 8002310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0ee      	beq.n	80022f8 <HAL_RCC_OscConfig+0x334>
 800231a:	e014      	b.n	8002346 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231c:	f7ff f928 	bl	8001570 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002322:	e00a      	b.n	800233a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002324:	f7ff f924 	bl	8001570 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002332:	4293      	cmp	r3, r2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e0b5      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800233a:	4b3e      	ldr	r3, [pc, #248]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 800233c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1ee      	bne.n	8002324 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002346:	7dfb      	ldrb	r3, [r7, #23]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d105      	bne.n	8002358 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800234c:	4b39      	ldr	r3, [pc, #228]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 800234e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002350:	4a38      	ldr	r2, [pc, #224]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 8002352:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002356:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80a1 	beq.w	80024a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002362:	4b34      	ldr	r3, [pc, #208]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
 800236a:	2b08      	cmp	r3, #8
 800236c:	d05c      	beq.n	8002428 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d141      	bne.n	80023fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002376:	4b31      	ldr	r3, [pc, #196]	@ (800243c <HAL_RCC_OscConfig+0x478>)
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237c:	f7ff f8f8 	bl	8001570 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002384:	f7ff f8f4 	bl	8001570 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e087      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002396:	4b27      	ldr	r3, [pc, #156]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69da      	ldr	r2, [r3, #28]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b0:	019b      	lsls	r3, r3, #6
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b8:	085b      	lsrs	r3, r3, #1
 80023ba:	3b01      	subs	r3, #1
 80023bc:	041b      	lsls	r3, r3, #16
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c4:	061b      	lsls	r3, r3, #24
 80023c6:	491b      	ldr	r1, [pc, #108]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023cc:	4b1b      	ldr	r3, [pc, #108]	@ (800243c <HAL_RCC_OscConfig+0x478>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d2:	f7ff f8cd 	bl	8001570 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023da:	f7ff f8c9 	bl	8001570 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e05c      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ec:	4b11      	ldr	r3, [pc, #68]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0f0      	beq.n	80023da <HAL_RCC_OscConfig+0x416>
 80023f8:	e054      	b.n	80024a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fa:	4b10      	ldr	r3, [pc, #64]	@ (800243c <HAL_RCC_OscConfig+0x478>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002400:	f7ff f8b6 	bl	8001570 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002408:	f7ff f8b2 	bl	8001570 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e045      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241a:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x444>
 8002426:	e03d      	b.n	80024a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d107      	bne.n	8002440 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e038      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
 8002434:	40023800 	.word	0x40023800
 8002438:	40007000 	.word	0x40007000
 800243c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002440:	4b1b      	ldr	r3, [pc, #108]	@ (80024b0 <HAL_RCC_OscConfig+0x4ec>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d028      	beq.n	80024a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002458:	429a      	cmp	r2, r3
 800245a:	d121      	bne.n	80024a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002466:	429a      	cmp	r2, r3
 8002468:	d11a      	bne.n	80024a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002470:	4013      	ands	r3, r2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002476:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002478:	4293      	cmp	r3, r2
 800247a:	d111      	bne.n	80024a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002486:	085b      	lsrs	r3, r3, #1
 8002488:	3b01      	subs	r3, #1
 800248a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800248c:	429a      	cmp	r2, r3
 800248e:	d107      	bne.n	80024a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800249c:	429a      	cmp	r2, r3
 800249e:	d001      	beq.n	80024a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023800 	.word	0x40023800

080024b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0cc      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024c8:	4b68      	ldr	r3, [pc, #416]	@ (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d90c      	bls.n	80024f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b65      	ldr	r3, [pc, #404]	@ (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b63      	ldr	r3, [pc, #396]	@ (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0b8      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d020      	beq.n	800253e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002508:	4b59      	ldr	r3, [pc, #356]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4a58      	ldr	r2, [pc, #352]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002512:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002520:	4b53      	ldr	r3, [pc, #332]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4a52      	ldr	r2, [pc, #328]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800252a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800252c:	4b50      	ldr	r3, [pc, #320]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	494d      	ldr	r1, [pc, #308]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	4313      	orrs	r3, r2
 800253c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d044      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d107      	bne.n	8002562 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	4b47      	ldr	r3, [pc, #284]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d119      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e07f      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d003      	beq.n	8002572 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800256e:	2b03      	cmp	r3, #3
 8002570:	d107      	bne.n	8002582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002572:	4b3f      	ldr	r3, [pc, #252]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d109      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e06f      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002582:	4b3b      	ldr	r3, [pc, #236]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e067      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002592:	4b37      	ldr	r3, [pc, #220]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f023 0203 	bic.w	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	4934      	ldr	r1, [pc, #208]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a4:	f7fe ffe4 	bl	8001570 <HAL_GetTick>
 80025a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025aa:	e00a      	b.n	80025c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ac:	f7fe ffe0 	bl	8001570 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e04f      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 020c 	and.w	r2, r3, #12
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d1eb      	bne.n	80025ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025d4:	4b25      	ldr	r3, [pc, #148]	@ (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d20c      	bcs.n	80025fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b22      	ldr	r3, [pc, #136]	@ (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ea:	4b20      	ldr	r3, [pc, #128]	@ (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d001      	beq.n	80025fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e032      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002608:	4b19      	ldr	r3, [pc, #100]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	4916      	ldr	r1, [pc, #88]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002626:	4b12      	ldr	r3, [pc, #72]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	490e      	ldr	r1, [pc, #56]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	4313      	orrs	r3, r2
 8002638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800263a:	f000 f821 	bl	8002680 <HAL_RCC_GetSysClockFreq>
 800263e:	4602      	mov	r2, r0
 8002640:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	490a      	ldr	r1, [pc, #40]	@ (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 800264c:	5ccb      	ldrb	r3, [r1, r3]
 800264e:	fa22 f303 	lsr.w	r3, r2, r3
 8002652:	4a09      	ldr	r2, [pc, #36]	@ (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002656:	4b09      	ldr	r3, [pc, #36]	@ (800267c <HAL_RCC_ClockConfig+0x1c8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe ff44 	bl	80014e8 <HAL_InitTick>

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40023c00 	.word	0x40023c00
 8002670:	40023800 	.word	0x40023800
 8002674:	080039e4 	.word	0x080039e4
 8002678:	20000060 	.word	0x20000060
 800267c:	20000064 	.word	0x20000064

08002680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002684:	b090      	sub	sp, #64	@ 0x40
 8002686:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	637b      	str	r3, [r7, #52]	@ 0x34
 800268c:	2300      	movs	r3, #0
 800268e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002690:	2300      	movs	r3, #0
 8002692:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002698:	4b59      	ldr	r3, [pc, #356]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x180>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 030c 	and.w	r3, r3, #12
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d00d      	beq.n	80026c0 <HAL_RCC_GetSysClockFreq+0x40>
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	f200 80a1 	bhi.w	80027ec <HAL_RCC_GetSysClockFreq+0x16c>
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d002      	beq.n	80026b4 <HAL_RCC_GetSysClockFreq+0x34>
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d003      	beq.n	80026ba <HAL_RCC_GetSysClockFreq+0x3a>
 80026b2:	e09b      	b.n	80027ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026b4:	4b53      	ldr	r3, [pc, #332]	@ (8002804 <HAL_RCC_GetSysClockFreq+0x184>)
 80026b6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80026b8:	e09b      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ba:	4b53      	ldr	r3, [pc, #332]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x188>)
 80026bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026be:	e098      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026c0:	4b4f      	ldr	r3, [pc, #316]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x180>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026ca:	4b4d      	ldr	r3, [pc, #308]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x180>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d028      	beq.n	8002728 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x180>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	099b      	lsrs	r3, r3, #6
 80026dc:	2200      	movs	r2, #0
 80026de:	623b      	str	r3, [r7, #32]
 80026e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80026e8:	2100      	movs	r1, #0
 80026ea:	4b47      	ldr	r3, [pc, #284]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x188>)
 80026ec:	fb03 f201 	mul.w	r2, r3, r1
 80026f0:	2300      	movs	r3, #0
 80026f2:	fb00 f303 	mul.w	r3, r0, r3
 80026f6:	4413      	add	r3, r2
 80026f8:	4a43      	ldr	r2, [pc, #268]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x188>)
 80026fa:	fba0 1202 	umull	r1, r2, r0, r2
 80026fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002700:	460a      	mov	r2, r1
 8002702:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002704:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002706:	4413      	add	r3, r2
 8002708:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800270a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800270c:	2200      	movs	r2, #0
 800270e:	61bb      	str	r3, [r7, #24]
 8002710:	61fa      	str	r2, [r7, #28]
 8002712:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002716:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800271a:	f7fd fd65 	bl	80001e8 <__aeabi_uldivmod>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4613      	mov	r3, r2
 8002724:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002726:	e053      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002728:	4b35      	ldr	r3, [pc, #212]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x180>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	099b      	lsrs	r3, r3, #6
 800272e:	2200      	movs	r2, #0
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	617a      	str	r2, [r7, #20]
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800273a:	f04f 0b00 	mov.w	fp, #0
 800273e:	4652      	mov	r2, sl
 8002740:	465b      	mov	r3, fp
 8002742:	f04f 0000 	mov.w	r0, #0
 8002746:	f04f 0100 	mov.w	r1, #0
 800274a:	0159      	lsls	r1, r3, #5
 800274c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002750:	0150      	lsls	r0, r2, #5
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	ebb2 080a 	subs.w	r8, r2, sl
 800275a:	eb63 090b 	sbc.w	r9, r3, fp
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800276a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800276e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002772:	ebb2 0408 	subs.w	r4, r2, r8
 8002776:	eb63 0509 	sbc.w	r5, r3, r9
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	00eb      	lsls	r3, r5, #3
 8002784:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002788:	00e2      	lsls	r2, r4, #3
 800278a:	4614      	mov	r4, r2
 800278c:	461d      	mov	r5, r3
 800278e:	eb14 030a 	adds.w	r3, r4, sl
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	eb45 030b 	adc.w	r3, r5, fp
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027a6:	4629      	mov	r1, r5
 80027a8:	028b      	lsls	r3, r1, #10
 80027aa:	4621      	mov	r1, r4
 80027ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027b0:	4621      	mov	r1, r4
 80027b2:	028a      	lsls	r2, r1, #10
 80027b4:	4610      	mov	r0, r2
 80027b6:	4619      	mov	r1, r3
 80027b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027ba:	2200      	movs	r2, #0
 80027bc:	60bb      	str	r3, [r7, #8]
 80027be:	60fa      	str	r2, [r7, #12]
 80027c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027c4:	f7fd fd10 	bl	80001e8 <__aeabi_uldivmod>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4613      	mov	r3, r2
 80027ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x180>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	0c1b      	lsrs	r3, r3, #16
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	3301      	adds	r3, #1
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80027e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80027e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027ea:	e002      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027ec:	4b05      	ldr	r3, [pc, #20]	@ (8002804 <HAL_RCC_GetSysClockFreq+0x184>)
 80027ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3740      	adds	r7, #64	@ 0x40
 80027f8:	46bd      	mov	sp, r7
 80027fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027fe:	bf00      	nop
 8002800:	40023800 	.word	0x40023800
 8002804:	00f42400 	.word	0x00f42400
 8002808:	017d7840 	.word	0x017d7840

0800280c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002810:	4b03      	ldr	r3, [pc, #12]	@ (8002820 <HAL_RCC_GetHCLKFreq+0x14>)
 8002812:	681b      	ldr	r3, [r3, #0]
}
 8002814:	4618      	mov	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	20000060 	.word	0x20000060

08002824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002828:	f7ff fff0 	bl	800280c <HAL_RCC_GetHCLKFreq>
 800282c:	4602      	mov	r2, r0
 800282e:	4b05      	ldr	r3, [pc, #20]	@ (8002844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	0a9b      	lsrs	r3, r3, #10
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	4903      	ldr	r1, [pc, #12]	@ (8002848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800283a:	5ccb      	ldrb	r3, [r1, r3]
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002840:	4618      	mov	r0, r3
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40023800 	.word	0x40023800
 8002848:	080039f4 	.word	0x080039f4

0800284c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002850:	f7ff ffdc 	bl	800280c <HAL_RCC_GetHCLKFreq>
 8002854:	4602      	mov	r2, r0
 8002856:	4b05      	ldr	r3, [pc, #20]	@ (800286c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	0b5b      	lsrs	r3, r3, #13
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	4903      	ldr	r1, [pc, #12]	@ (8002870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002862:	5ccb      	ldrb	r3, [r1, r3]
 8002864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002868:	4618      	mov	r0, r3
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40023800 	.word	0x40023800
 8002870:	080039f4 	.word	0x080039f4

08002874 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d105      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002898:	2b00      	cmp	r3, #0
 800289a:	d038      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800289c:	4b68      	ldr	r3, [pc, #416]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80028a2:	f7fe fe65 	bl	8001570 <HAL_GetTick>
 80028a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028a8:	e008      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80028aa:	f7fe fe61 	bl	8001570 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e0bd      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028bc:	4b61      	ldr	r3, [pc, #388]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f0      	bne.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	019b      	lsls	r3, r3, #6
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	071b      	lsls	r3, r3, #28
 80028da:	495a      	ldr	r1, [pc, #360]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80028e2:	4b57      	ldr	r3, [pc, #348]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80028e8:	f7fe fe42 	bl	8001570 <HAL_GetTick>
 80028ec:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80028f0:	f7fe fe3e 	bl	8001570 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e09a      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002902:	4b50      	ldr	r3, [pc, #320]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 8083 	beq.w	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	4b48      	ldr	r3, [pc, #288]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	4a47      	ldr	r2, [pc, #284]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002926:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800292a:	6413      	str	r3, [r2, #64]	@ 0x40
 800292c:	4b45      	ldr	r3, [pc, #276]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002938:	4b43      	ldr	r3, [pc, #268]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a42      	ldr	r2, [pc, #264]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800293e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002942:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002944:	f7fe fe14 	bl	8001570 <HAL_GetTick>
 8002948:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800294a:	e008      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800294c:	f7fe fe10 	bl	8001570 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e06c      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800295e:	4b3a      	ldr	r3, [pc, #232]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800296a:	4b36      	ldr	r3, [pc, #216]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002972:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d02f      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x166>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	429a      	cmp	r2, r3
 8002986:	d028      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002988:	4b2e      	ldr	r3, [pc, #184]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800298a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800298c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002990:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002992:	4b2e      	ldr	r3, [pc, #184]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002994:	2201      	movs	r2, #1
 8002996:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002998:	4b2c      	ldr	r3, [pc, #176]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800299e:	4a29      	ldr	r2, [pc, #164]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029a4:	4b27      	ldr	r3, [pc, #156]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d114      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80029b0:	f7fe fdde 	bl	8001570 <HAL_GetTick>
 80029b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b6:	e00a      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b8:	f7fe fdda 	bl	8001570 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e034      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0ee      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80029e6:	d10d      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80029e8:	4b16      	ldr	r3, [pc, #88]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80029f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029fc:	4911      	ldr	r1, [pc, #68]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	608b      	str	r3, [r1, #8]
 8002a02:	e005      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002a04:	4b0f      	ldr	r3, [pc, #60]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	4a0e      	ldr	r2, [pc, #56]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a0a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002a0e:	6093      	str	r3, [r2, #8]
 8002a10:	4b0c      	ldr	r3, [pc, #48]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a12:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a1c:	4909      	ldr	r1, [pc, #36]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	7d1a      	ldrb	r2, [r3, #20]
 8002a32:	4b07      	ldr	r3, [pc, #28]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002a34:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	42470068 	.word	0x42470068
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40007000 	.word	0x40007000
 8002a4c:	42470e40 	.word	0x42470e40
 8002a50:	424711e0 	.word	0x424711e0

08002a54 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e073      	b.n	8002b52 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	7f5b      	ldrb	r3, [r3, #29]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d105      	bne.n	8002a80 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7fe fb70 	bl	8001160 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	2b10      	cmp	r3, #16
 8002a92:	d055      	beq.n	8002b40 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	22ca      	movs	r2, #202	@ 0xca
 8002a9a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2253      	movs	r2, #83	@ 0x53
 8002aa2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f99d 	bl	8002de4 <RTC_EnterInitMode>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d12c      	bne.n	8002b0e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002ac2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ac6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6899      	ldr	r1, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	431a      	orrs	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68d2      	ldr	r2, [r2, #12]
 8002aee:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6919      	ldr	r1, [r3, #16]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	041a      	lsls	r2, r3, #16
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f9a4 	bl	8002e52 <RTC_ExitInitMode>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d110      	bne.n	8002b36 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b22:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699a      	ldr	r2, [r3, #24]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	22ff      	movs	r2, #255	@ 0xff
 8002b3c:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b3e:	e001      	b.n	8002b44 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d102      	bne.n	8002b50 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002b5a:	b590      	push	{r4, r7, lr}
 8002b5c:	b087      	sub	sp, #28
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	60f8      	str	r0, [r7, #12]
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	7f1b      	ldrb	r3, [r3, #28]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_RTC_SetTime+0x1c>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e087      	b.n	8002c86 <HAL_RTC_SetTime+0x12c>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d126      	bne.n	8002bd6 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d102      	bne.n	8002b9c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 f97b 	bl	8002e9c <RTC_ByteToBcd2>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	785b      	ldrb	r3, [r3, #1]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 f974 	bl	8002e9c <RTC_ByteToBcd2>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002bb8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	789b      	ldrb	r3, [r3, #2]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 f96c 	bl	8002e9c <RTC_ByteToBcd2>
 8002bc4:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002bc6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	78db      	ldrb	r3, [r3, #3]
 8002bce:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	e018      	b.n	8002c08 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d102      	bne.n	8002bea <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2200      	movs	r2, #0
 8002be8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	785b      	ldrb	r3, [r3, #1]
 8002bf4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002bf6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002bfc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	78db      	ldrb	r3, [r3, #3]
 8002c02:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002c04:	4313      	orrs	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	22ca      	movs	r2, #202	@ 0xca
 8002c0e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2253      	movs	r2, #83	@ 0x53
 8002c16:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 f8e3 	bl	8002de4 <RTC_EnterInitMode>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002c22:	7cfb      	ldrb	r3, [r7, #19]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d120      	bne.n	8002c6a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002c32:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002c36:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c46:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6899      	ldr	r1, [r3, #8]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	431a      	orrs	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 f8f6 	bl	8002e52 <RTC_ExitInitMode>
 8002c66:	4603      	mov	r3, r0
 8002c68:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002c6a:	7cfb      	ldrb	r3, [r7, #19]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d102      	bne.n	8002c76 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2201      	movs	r2, #1
 8002c74:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	22ff      	movs	r2, #255	@ 0xff
 8002c7c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	771a      	strb	r2, [r3, #28]

  return status;
 8002c84:	7cfb      	ldrb	r3, [r7, #19]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	371c      	adds	r7, #28
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd90      	pop	{r4, r7, pc}

08002c8e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002c8e:	b590      	push	{r4, r7, lr}
 8002c90:	b087      	sub	sp, #28
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	7f1b      	ldrb	r3, [r3, #28]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d101      	bne.n	8002caa <HAL_RTC_SetDate+0x1c>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e071      	b.n	8002d8e <HAL_RTC_SetDate+0x100>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2201      	movs	r2, #1
 8002cae:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10e      	bne.n	8002cda <HAL_RTC_SetDate+0x4c>
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	785b      	ldrb	r3, [r3, #1]
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	785b      	ldrb	r3, [r3, #1]
 8002ccc:	f023 0310 	bic.w	r3, r3, #16
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	330a      	adds	r3, #10
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d11c      	bne.n	8002d1a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	78db      	ldrb	r3, [r3, #3]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 f8d9 	bl	8002e9c <RTC_ByteToBcd2>
 8002cea:	4603      	mov	r3, r0
 8002cec:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	785b      	ldrb	r3, [r3, #1]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 f8d2 	bl	8002e9c <RTC_ByteToBcd2>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002cfc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	789b      	ldrb	r3, [r3, #2]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 f8ca 	bl	8002e9c <RTC_ByteToBcd2>
 8002d08:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002d0a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	e00e      	b.n	8002d38 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	78db      	ldrb	r3, [r3, #3]
 8002d1e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	785b      	ldrb	r3, [r3, #1]
 8002d24:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002d26:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002d2c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002d34:	4313      	orrs	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	22ca      	movs	r2, #202	@ 0xca
 8002d3e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2253      	movs	r2, #83	@ 0x53
 8002d46:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 f84b 	bl	8002de4 <RTC_EnterInitMode>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002d52:	7cfb      	ldrb	r3, [r7, #19]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10c      	bne.n	8002d72 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d62:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002d66:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 f872 	bl	8002e52 <RTC_ExitInitMode>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002d72:	7cfb      	ldrb	r3, [r7, #19]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d102      	bne.n	8002d7e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	22ff      	movs	r2, #255	@ 0xff
 8002d84:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	771a      	strb	r2, [r3, #28]

  return status;
 8002d8c:	7cfb      	ldrb	r3, [r7, #19]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	371c      	adds	r7, #28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd90      	pop	{r4, r7, pc}
	...

08002d98 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a0d      	ldr	r2, [pc, #52]	@ (8002de0 <HAL_RTC_WaitForSynchro+0x48>)
 8002daa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dac:	f7fe fbe0 	bl	8001570 <HAL_GetTick>
 8002db0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002db2:	e009      	b.n	8002dc8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002db4:	f7fe fbdc 	bl	8001570 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e007      	b.n	8002dd8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0ee      	beq.n	8002db4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	00013f5f 	.word	0x00013f5f

08002de4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d122      	bne.n	8002e48 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e10:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e12:	f7fe fbad 	bl	8001570 <HAL_GetTick>
 8002e16:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002e18:	e00c      	b.n	8002e34 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e1a:	f7fe fba9 	bl	8001570 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e28:	d904      	bls.n	8002e34 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2204      	movs	r2, #4
 8002e2e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d102      	bne.n	8002e48 <RTC_EnterInitMode+0x64>
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d1e8      	bne.n	8002e1a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b084      	sub	sp, #16
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e6c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 0320 	and.w	r3, r3, #32
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10a      	bne.n	8002e92 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7ff ff8b 	bl	8002d98 <HAL_RTC_WaitForSynchro>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d004      	beq.n	8002e92 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2204      	movs	r2, #4
 8002e8c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002eaa:	e005      	b.n	8002eb8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	3b0a      	subs	r3, #10
 8002eb6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	2b09      	cmp	r3, #9
 8002ebc:	d8f6      	bhi.n	8002eac <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	b2db      	uxtb	r3, r3
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3350      	adds	r3, #80	@ 0x50
 8002eee:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	601a      	str	r2, [r3, #0]
}
 8002f00:	bf00      	nop
 8002f02:	371c      	adds	r7, #28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	3350      	adds	r3, #80	@ 0x50
 8002f20:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4413      	add	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e07b      	b.n	8003046 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d108      	bne.n	8002f68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f5e:	d009      	beq.n	8002f74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	61da      	str	r2, [r3, #28]
 8002f66:	e005      	b.n	8002f74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7fe f912 	bl	80011b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002faa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ff8:	ea42 0103 	orr.w	r1, r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003000:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	0c1b      	lsrs	r3, r3, #16
 8003012:	f003 0104 	and.w	r1, r3, #4
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301a:	f003 0210 	and.w	r2, r3, #16
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003034:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e042      	b.n	80030e6 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	d106      	bne.n	800307a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7fe f8f7 	bl	8001268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2224      	movs	r2, #36	@ 0x24
 800307e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003090:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f82c 	bl	80030f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691a      	ldr	r2, [r3, #16]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030a6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695a      	ldr	r2, [r3, #20]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030b6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030c6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030f4:	b0c0      	sub	sp, #256	@ 0x100
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800310c:	68d9      	ldr	r1, [r3, #12]
 800310e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	ea40 0301 	orr.w	r3, r0, r1
 8003118:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800311a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	431a      	orrs	r2, r3
 8003128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	431a      	orrs	r2, r3
 8003130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	4313      	orrs	r3, r2
 8003138:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800313c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003148:	f021 010c 	bic.w	r1, r1, #12
 800314c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003156:	430b      	orrs	r3, r1
 8003158:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800315a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800316a:	6999      	ldr	r1, [r3, #24]
 800316c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	ea40 0301 	orr.w	r3, r0, r1
 8003176:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	4b8f      	ldr	r3, [pc, #572]	@ (80033bc <UART_SetConfig+0x2cc>)
 8003180:	429a      	cmp	r2, r3
 8003182:	d005      	beq.n	8003190 <UART_SetConfig+0xa0>
 8003184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	4b8d      	ldr	r3, [pc, #564]	@ (80033c0 <UART_SetConfig+0x2d0>)
 800318c:	429a      	cmp	r2, r3
 800318e:	d104      	bne.n	800319a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003190:	f7ff fb5c 	bl	800284c <HAL_RCC_GetPCLK2Freq>
 8003194:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003198:	e003      	b.n	80031a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800319a:	f7ff fb43 	bl	8002824 <HAL_RCC_GetPCLK1Freq>
 800319e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031ac:	f040 810c 	bne.w	80033c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031b4:	2200      	movs	r2, #0
 80031b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80031ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80031be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80031c2:	4622      	mov	r2, r4
 80031c4:	462b      	mov	r3, r5
 80031c6:	1891      	adds	r1, r2, r2
 80031c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80031ca:	415b      	adcs	r3, r3
 80031cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80031d2:	4621      	mov	r1, r4
 80031d4:	eb12 0801 	adds.w	r8, r2, r1
 80031d8:	4629      	mov	r1, r5
 80031da:	eb43 0901 	adc.w	r9, r3, r1
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031f2:	4690      	mov	r8, r2
 80031f4:	4699      	mov	r9, r3
 80031f6:	4623      	mov	r3, r4
 80031f8:	eb18 0303 	adds.w	r3, r8, r3
 80031fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003200:	462b      	mov	r3, r5
 8003202:	eb49 0303 	adc.w	r3, r9, r3
 8003206:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800320a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003216:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800321a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800321e:	460b      	mov	r3, r1
 8003220:	18db      	adds	r3, r3, r3
 8003222:	653b      	str	r3, [r7, #80]	@ 0x50
 8003224:	4613      	mov	r3, r2
 8003226:	eb42 0303 	adc.w	r3, r2, r3
 800322a:	657b      	str	r3, [r7, #84]	@ 0x54
 800322c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003230:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003234:	f7fc ffd8 	bl	80001e8 <__aeabi_uldivmod>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	4b61      	ldr	r3, [pc, #388]	@ (80033c4 <UART_SetConfig+0x2d4>)
 800323e:	fba3 2302 	umull	r2, r3, r3, r2
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	011c      	lsls	r4, r3, #4
 8003246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800324a:	2200      	movs	r2, #0
 800324c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003250:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003254:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003258:	4642      	mov	r2, r8
 800325a:	464b      	mov	r3, r9
 800325c:	1891      	adds	r1, r2, r2
 800325e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003260:	415b      	adcs	r3, r3
 8003262:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003264:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003268:	4641      	mov	r1, r8
 800326a:	eb12 0a01 	adds.w	sl, r2, r1
 800326e:	4649      	mov	r1, r9
 8003270:	eb43 0b01 	adc.w	fp, r3, r1
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003280:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003284:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003288:	4692      	mov	sl, r2
 800328a:	469b      	mov	fp, r3
 800328c:	4643      	mov	r3, r8
 800328e:	eb1a 0303 	adds.w	r3, sl, r3
 8003292:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003296:	464b      	mov	r3, r9
 8003298:	eb4b 0303 	adc.w	r3, fp, r3
 800329c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80032b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80032b4:	460b      	mov	r3, r1
 80032b6:	18db      	adds	r3, r3, r3
 80032b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80032ba:	4613      	mov	r3, r2
 80032bc:	eb42 0303 	adc.w	r3, r2, r3
 80032c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80032c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80032c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80032ca:	f7fc ff8d 	bl	80001e8 <__aeabi_uldivmod>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4611      	mov	r1, r2
 80032d4:	4b3b      	ldr	r3, [pc, #236]	@ (80033c4 <UART_SetConfig+0x2d4>)
 80032d6:	fba3 2301 	umull	r2, r3, r3, r1
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	2264      	movs	r2, #100	@ 0x64
 80032de:	fb02 f303 	mul.w	r3, r2, r3
 80032e2:	1acb      	subs	r3, r1, r3
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80032ea:	4b36      	ldr	r3, [pc, #216]	@ (80033c4 <UART_SetConfig+0x2d4>)
 80032ec:	fba3 2302 	umull	r2, r3, r3, r2
 80032f0:	095b      	lsrs	r3, r3, #5
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80032f8:	441c      	add	r4, r3
 80032fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032fe:	2200      	movs	r2, #0
 8003300:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003304:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003308:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800330c:	4642      	mov	r2, r8
 800330e:	464b      	mov	r3, r9
 8003310:	1891      	adds	r1, r2, r2
 8003312:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003314:	415b      	adcs	r3, r3
 8003316:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003318:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800331c:	4641      	mov	r1, r8
 800331e:	1851      	adds	r1, r2, r1
 8003320:	6339      	str	r1, [r7, #48]	@ 0x30
 8003322:	4649      	mov	r1, r9
 8003324:	414b      	adcs	r3, r1
 8003326:	637b      	str	r3, [r7, #52]	@ 0x34
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003334:	4659      	mov	r1, fp
 8003336:	00cb      	lsls	r3, r1, #3
 8003338:	4651      	mov	r1, sl
 800333a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800333e:	4651      	mov	r1, sl
 8003340:	00ca      	lsls	r2, r1, #3
 8003342:	4610      	mov	r0, r2
 8003344:	4619      	mov	r1, r3
 8003346:	4603      	mov	r3, r0
 8003348:	4642      	mov	r2, r8
 800334a:	189b      	adds	r3, r3, r2
 800334c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003350:	464b      	mov	r3, r9
 8003352:	460a      	mov	r2, r1
 8003354:	eb42 0303 	adc.w	r3, r2, r3
 8003358:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800335c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003368:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800336c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003370:	460b      	mov	r3, r1
 8003372:	18db      	adds	r3, r3, r3
 8003374:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003376:	4613      	mov	r3, r2
 8003378:	eb42 0303 	adc.w	r3, r2, r3
 800337c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800337e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003382:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003386:	f7fc ff2f 	bl	80001e8 <__aeabi_uldivmod>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4b0d      	ldr	r3, [pc, #52]	@ (80033c4 <UART_SetConfig+0x2d4>)
 8003390:	fba3 1302 	umull	r1, r3, r3, r2
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	2164      	movs	r1, #100	@ 0x64
 8003398:	fb01 f303 	mul.w	r3, r1, r3
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	3332      	adds	r3, #50	@ 0x32
 80033a2:	4a08      	ldr	r2, [pc, #32]	@ (80033c4 <UART_SetConfig+0x2d4>)
 80033a4:	fba2 2303 	umull	r2, r3, r2, r3
 80033a8:	095b      	lsrs	r3, r3, #5
 80033aa:	f003 0207 	and.w	r2, r3, #7
 80033ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4422      	add	r2, r4
 80033b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033b8:	e106      	b.n	80035c8 <UART_SetConfig+0x4d8>
 80033ba:	bf00      	nop
 80033bc:	40011000 	.word	0x40011000
 80033c0:	40011400 	.word	0x40011400
 80033c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033cc:	2200      	movs	r2, #0
 80033ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80033d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80033d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80033da:	4642      	mov	r2, r8
 80033dc:	464b      	mov	r3, r9
 80033de:	1891      	adds	r1, r2, r2
 80033e0:	6239      	str	r1, [r7, #32]
 80033e2:	415b      	adcs	r3, r3
 80033e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80033e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033ea:	4641      	mov	r1, r8
 80033ec:	1854      	adds	r4, r2, r1
 80033ee:	4649      	mov	r1, r9
 80033f0:	eb43 0501 	adc.w	r5, r3, r1
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	00eb      	lsls	r3, r5, #3
 80033fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003402:	00e2      	lsls	r2, r4, #3
 8003404:	4614      	mov	r4, r2
 8003406:	461d      	mov	r5, r3
 8003408:	4643      	mov	r3, r8
 800340a:	18e3      	adds	r3, r4, r3
 800340c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003410:	464b      	mov	r3, r9
 8003412:	eb45 0303 	adc.w	r3, r5, r3
 8003416:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800341a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003426:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	f04f 0300 	mov.w	r3, #0
 8003432:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003436:	4629      	mov	r1, r5
 8003438:	008b      	lsls	r3, r1, #2
 800343a:	4621      	mov	r1, r4
 800343c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003440:	4621      	mov	r1, r4
 8003442:	008a      	lsls	r2, r1, #2
 8003444:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003448:	f7fc fece 	bl	80001e8 <__aeabi_uldivmod>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4b60      	ldr	r3, [pc, #384]	@ (80035d4 <UART_SetConfig+0x4e4>)
 8003452:	fba3 2302 	umull	r2, r3, r3, r2
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	011c      	lsls	r4, r3, #4
 800345a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800345e:	2200      	movs	r2, #0
 8003460:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003464:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003468:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800346c:	4642      	mov	r2, r8
 800346e:	464b      	mov	r3, r9
 8003470:	1891      	adds	r1, r2, r2
 8003472:	61b9      	str	r1, [r7, #24]
 8003474:	415b      	adcs	r3, r3
 8003476:	61fb      	str	r3, [r7, #28]
 8003478:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800347c:	4641      	mov	r1, r8
 800347e:	1851      	adds	r1, r2, r1
 8003480:	6139      	str	r1, [r7, #16]
 8003482:	4649      	mov	r1, r9
 8003484:	414b      	adcs	r3, r1
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003494:	4659      	mov	r1, fp
 8003496:	00cb      	lsls	r3, r1, #3
 8003498:	4651      	mov	r1, sl
 800349a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800349e:	4651      	mov	r1, sl
 80034a0:	00ca      	lsls	r2, r1, #3
 80034a2:	4610      	mov	r0, r2
 80034a4:	4619      	mov	r1, r3
 80034a6:	4603      	mov	r3, r0
 80034a8:	4642      	mov	r2, r8
 80034aa:	189b      	adds	r3, r3, r2
 80034ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034b0:	464b      	mov	r3, r9
 80034b2:	460a      	mov	r2, r1
 80034b4:	eb42 0303 	adc.w	r3, r2, r3
 80034b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80034d4:	4649      	mov	r1, r9
 80034d6:	008b      	lsls	r3, r1, #2
 80034d8:	4641      	mov	r1, r8
 80034da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034de:	4641      	mov	r1, r8
 80034e0:	008a      	lsls	r2, r1, #2
 80034e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80034e6:	f7fc fe7f 	bl	80001e8 <__aeabi_uldivmod>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4611      	mov	r1, r2
 80034f0:	4b38      	ldr	r3, [pc, #224]	@ (80035d4 <UART_SetConfig+0x4e4>)
 80034f2:	fba3 2301 	umull	r2, r3, r3, r1
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	2264      	movs	r2, #100	@ 0x64
 80034fa:	fb02 f303 	mul.w	r3, r2, r3
 80034fe:	1acb      	subs	r3, r1, r3
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	3332      	adds	r3, #50	@ 0x32
 8003504:	4a33      	ldr	r2, [pc, #204]	@ (80035d4 <UART_SetConfig+0x4e4>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	095b      	lsrs	r3, r3, #5
 800350c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003510:	441c      	add	r4, r3
 8003512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003516:	2200      	movs	r2, #0
 8003518:	673b      	str	r3, [r7, #112]	@ 0x70
 800351a:	677a      	str	r2, [r7, #116]	@ 0x74
 800351c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003520:	4642      	mov	r2, r8
 8003522:	464b      	mov	r3, r9
 8003524:	1891      	adds	r1, r2, r2
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	415b      	adcs	r3, r3
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003530:	4641      	mov	r1, r8
 8003532:	1851      	adds	r1, r2, r1
 8003534:	6039      	str	r1, [r7, #0]
 8003536:	4649      	mov	r1, r9
 8003538:	414b      	adcs	r3, r1
 800353a:	607b      	str	r3, [r7, #4]
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003548:	4659      	mov	r1, fp
 800354a:	00cb      	lsls	r3, r1, #3
 800354c:	4651      	mov	r1, sl
 800354e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003552:	4651      	mov	r1, sl
 8003554:	00ca      	lsls	r2, r1, #3
 8003556:	4610      	mov	r0, r2
 8003558:	4619      	mov	r1, r3
 800355a:	4603      	mov	r3, r0
 800355c:	4642      	mov	r2, r8
 800355e:	189b      	adds	r3, r3, r2
 8003560:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003562:	464b      	mov	r3, r9
 8003564:	460a      	mov	r2, r1
 8003566:	eb42 0303 	adc.w	r3, r2, r3
 800356a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800356c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	663b      	str	r3, [r7, #96]	@ 0x60
 8003576:	667a      	str	r2, [r7, #100]	@ 0x64
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003584:	4649      	mov	r1, r9
 8003586:	008b      	lsls	r3, r1, #2
 8003588:	4641      	mov	r1, r8
 800358a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800358e:	4641      	mov	r1, r8
 8003590:	008a      	lsls	r2, r1, #2
 8003592:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003596:	f7fc fe27 	bl	80001e8 <__aeabi_uldivmod>
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	4b0d      	ldr	r3, [pc, #52]	@ (80035d4 <UART_SetConfig+0x4e4>)
 80035a0:	fba3 1302 	umull	r1, r3, r3, r2
 80035a4:	095b      	lsrs	r3, r3, #5
 80035a6:	2164      	movs	r1, #100	@ 0x64
 80035a8:	fb01 f303 	mul.w	r3, r1, r3
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	3332      	adds	r3, #50	@ 0x32
 80035b2:	4a08      	ldr	r2, [pc, #32]	@ (80035d4 <UART_SetConfig+0x4e4>)
 80035b4:	fba2 2303 	umull	r2, r3, r2, r3
 80035b8:	095b      	lsrs	r3, r3, #5
 80035ba:	f003 020f 	and.w	r2, r3, #15
 80035be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4422      	add	r2, r4
 80035c6:	609a      	str	r2, [r3, #8]
}
 80035c8:	bf00      	nop
 80035ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80035ce:	46bd      	mov	sp, r7
 80035d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035d4:	51eb851f 	.word	0x51eb851f

080035d8 <Inicializar>:
	a->_instruccion=7;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void Inicializar(struct WIFI *a)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
a->_estado=0;					//Estado de m�dulo WIFI
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
a->_dataRCV[1024]='\0'; //a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2498 	strb.w	r2, [r3, #1176]	@ 0x498
a->_data2SND[64]='\0';			//Data a enviar por TCP
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 22d8 	strb.w	r2, [r3, #728]	@ 0x2d8
a->_uart2snd[1024]='\0';//a->_uart2snd[512]='\0';			//Datos a enviar por UART
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2898 	strb.w	r2, [r3, #2200]	@ 0x898
a->_uartRCVD[1024]='\0';//a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2a98 	strb.w	r2, [r3, #2712]	@ 0xa98
a->_uartRCVD_tok[1024]='\0';//a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2c98 	strb.w	r2, [r3, #3224]	@ 0xc98
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f8c3 2aa0 	str.w	r2, [r3, #2720]	@ 0xaa0
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	@ 0xaa4
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f8c3 2aac 	str.w	r2, [r3, #2732]	@ 0xaac
a->_instruccion=0;				//Funcion que se desea realizar
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f8c3 2ab0 	str.w	r2, [r3, #2736]	@ 0xab0
a->_ejecucion=0;				//Funcion en ejecucion	
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f8c3 2ab4 	str.w	r2, [r3, #2740]	@ 0xab4
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2af8 	strb.w	r2, [r3, #2808]	@ 0xaf8
a->_ticks=0;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f8c3 2cb8 	str.w	r2, [r3, #3256]	@ 0xcb8
a->_ticks2=0;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f8c3 2cbc 	str.w	r2, [r3, #3260]	@ 0xcbc
a->_debug=0;					//utilizada par fines de debugging
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f8c3 2cc8 	str.w	r2, [r3, #3272]	@ 0xcc8
a->_debug_str=0;				//utilizada par fines de debugging
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f8c3 2ccc 	str.w	r2, [r3, #3276]	@ 0xccc
a->_debug_pos=0;				//utilizada par fines de debugging
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f8c3 2cd0 	str.w	r2, [r3, #3280]	@ 0xcd0
a->_debug_chrs=0;				//utilizada par fines de debugging
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f8c3 2cd4 	str.w	r2, [r3, #3284]	@ 0xcd4
a->_debug_rx_ok=0;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	@ 0xcd8
a->_debug_rx_no_ok=0;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f8c3 2ce0 	str.w	r2, [r3, #3296]	@ 0xce0
a->_debug_SEND_OK=0;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
a->_debug_CLOSED=0;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f8c3 2d38 	str.w	r2, [r3, #3384]	@ 0xd38
a->_debug_WF_DISCONNECT=0;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f8c3 2d3c 	str.w	r2, [r3, #3388]	@ 0xd3c
a->_debug_FAIL=0;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f8c3 2d40 	str.w	r2, [r3, #3392]	@ 0xd40
a->_debug_CONNECT=0;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
a->_debug_count=0;				//Cuento la catidad de ipds	
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
a->_debug_count_old=0;			//Cuento la catidad de ipds
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f8c3 2d08 	str.w	r2, [r3, #3336]	@ 0xd08
a->_debug_count2=0;				//SEND OK para enviar datos
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f8c3 2d10 	str.w	r2, [r3, #3344]	@ 0xd10
a->_debug_count4=0;				//SEDN OK recibido directo
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f8c3 2d14 	str.w	r2, [r3, #3348]	@ 0xd14
a->_debug_count5=0;				//Cuento la catidad de ipds	
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f8c3 2d18 	str.w	r2, [r3, #3352]	@ 0xd18
a->_debug_count6=0;				//Cuento la catidad de ipds	
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f8c3 2d1c 	str.w	r2, [r3, #3356]	@ 0xd1c
a->_debug_count7=0;				//Cuento la catidad de ipds
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
a->_debug_count8=0;				//Cuento la catidad de ipds
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f8c3 2d24 	str.w	r2, [r3, #3364]	@ 0xd24
a->_debug_count9=0;				//Cuento la catidad de ipds
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f8c3 2d28 	str.w	r2, [r3, #3368]	@ 0xd28
a->_debug_count10=0;			//Cuento la catidad de ipds
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f8c3 2d2c 	str.w	r2, [r3, #3372]	@ 0xd2c
a->_subpaso=0;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f8c3 2d50 	str.w	r2, [r3, #3408]	@ 0xd50
a->_overflowVector=512;			//Maximo tamaño del vector al procesar un +IPD
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003766:	f8c3 2d54 	str.w	r2, [r3, #3412]	@ 0xd54
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
	...

08003778 <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	711a      	strb	r2, [r3, #4]
	m->_timeout=500;						//Timeout para la recepción de respuesta.
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003792:	80da      	strh	r2, [r3, #6]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	729a      	strb	r2, [r3, #10]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2220      	movs	r2, #32
 800379e:	f883 2620 	strb.w	r2, [r3, #1568]	@ 0x620
	m->_Coils=0xF0F0AF5A;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003818 <ModBUS_Config+0xa0>)
 80037a6:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	72da      	strb	r2, [r3, #11]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 2626 	strb.w	r2, [r3, #1574]	@ 0x626
	m->_Inputs=0xA5FA0F0F;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a18      	ldr	r2, [pc, #96]	@ (800381c <ModBUS_Config+0xa4>)
 80037bc:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	731a      	strb	r2, [r3, #12]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2210      	movs	r2, #16
 80037ca:	f883 262c 	strb.w	r2, [r3, #1580]	@ 0x62c

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	735a      	strb	r2, [r3, #13]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2210      	movs	r2, #16
 80037d8:	f883 2632 	strb.w	r2, [r3, #1586]	@ 0x632

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	739a      	strb	r2, [r3, #14]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 2638 	strb.w	r2, [r3, #1592]	@ 0x638

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	73da      	strb	r2, [r3, #15]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	741a      	strb	r2, [r3, #16]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f883 263e 	strb.w	r2, [r3, #1598]	@ 0x63e

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	745a      	strb	r2, [r3, #17]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 264a 	strb.w	r2, [r3, #1610]	@ 0x64a
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	f0f0af5a 	.word	0xf0f0af5a
 800381c:	a5fa0f0f 	.word	0xa5fa0f0f

08003820 <atoi>:
 8003820:	220a      	movs	r2, #10
 8003822:	2100      	movs	r1, #0
 8003824:	f000 b87a 	b.w	800391c <strtol>

08003828 <_strtol_l.constprop.0>:
 8003828:	2b24      	cmp	r3, #36	@ 0x24
 800382a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800382e:	4686      	mov	lr, r0
 8003830:	4690      	mov	r8, r2
 8003832:	d801      	bhi.n	8003838 <_strtol_l.constprop.0+0x10>
 8003834:	2b01      	cmp	r3, #1
 8003836:	d106      	bne.n	8003846 <_strtol_l.constprop.0+0x1e>
 8003838:	f000 f882 	bl	8003940 <__errno>
 800383c:	2316      	movs	r3, #22
 800383e:	6003      	str	r3, [r0, #0]
 8003840:	2000      	movs	r0, #0
 8003842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003846:	4834      	ldr	r0, [pc, #208]	@ (8003918 <_strtol_l.constprop.0+0xf0>)
 8003848:	460d      	mov	r5, r1
 800384a:	462a      	mov	r2, r5
 800384c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003850:	5d06      	ldrb	r6, [r0, r4]
 8003852:	f016 0608 	ands.w	r6, r6, #8
 8003856:	d1f8      	bne.n	800384a <_strtol_l.constprop.0+0x22>
 8003858:	2c2d      	cmp	r4, #45	@ 0x2d
 800385a:	d12d      	bne.n	80038b8 <_strtol_l.constprop.0+0x90>
 800385c:	782c      	ldrb	r4, [r5, #0]
 800385e:	2601      	movs	r6, #1
 8003860:	1c95      	adds	r5, r2, #2
 8003862:	f033 0210 	bics.w	r2, r3, #16
 8003866:	d109      	bne.n	800387c <_strtol_l.constprop.0+0x54>
 8003868:	2c30      	cmp	r4, #48	@ 0x30
 800386a:	d12a      	bne.n	80038c2 <_strtol_l.constprop.0+0x9a>
 800386c:	782a      	ldrb	r2, [r5, #0]
 800386e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003872:	2a58      	cmp	r2, #88	@ 0x58
 8003874:	d125      	bne.n	80038c2 <_strtol_l.constprop.0+0x9a>
 8003876:	786c      	ldrb	r4, [r5, #1]
 8003878:	2310      	movs	r3, #16
 800387a:	3502      	adds	r5, #2
 800387c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003880:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003884:	2200      	movs	r2, #0
 8003886:	fbbc f9f3 	udiv	r9, ip, r3
 800388a:	4610      	mov	r0, r2
 800388c:	fb03 ca19 	mls	sl, r3, r9, ip
 8003890:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003894:	2f09      	cmp	r7, #9
 8003896:	d81b      	bhi.n	80038d0 <_strtol_l.constprop.0+0xa8>
 8003898:	463c      	mov	r4, r7
 800389a:	42a3      	cmp	r3, r4
 800389c:	dd27      	ble.n	80038ee <_strtol_l.constprop.0+0xc6>
 800389e:	1c57      	adds	r7, r2, #1
 80038a0:	d007      	beq.n	80038b2 <_strtol_l.constprop.0+0x8a>
 80038a2:	4581      	cmp	r9, r0
 80038a4:	d320      	bcc.n	80038e8 <_strtol_l.constprop.0+0xc0>
 80038a6:	d101      	bne.n	80038ac <_strtol_l.constprop.0+0x84>
 80038a8:	45a2      	cmp	sl, r4
 80038aa:	db1d      	blt.n	80038e8 <_strtol_l.constprop.0+0xc0>
 80038ac:	fb00 4003 	mla	r0, r0, r3, r4
 80038b0:	2201      	movs	r2, #1
 80038b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80038b6:	e7eb      	b.n	8003890 <_strtol_l.constprop.0+0x68>
 80038b8:	2c2b      	cmp	r4, #43	@ 0x2b
 80038ba:	bf04      	itt	eq
 80038bc:	782c      	ldrbeq	r4, [r5, #0]
 80038be:	1c95      	addeq	r5, r2, #2
 80038c0:	e7cf      	b.n	8003862 <_strtol_l.constprop.0+0x3a>
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1da      	bne.n	800387c <_strtol_l.constprop.0+0x54>
 80038c6:	2c30      	cmp	r4, #48	@ 0x30
 80038c8:	bf0c      	ite	eq
 80038ca:	2308      	moveq	r3, #8
 80038cc:	230a      	movne	r3, #10
 80038ce:	e7d5      	b.n	800387c <_strtol_l.constprop.0+0x54>
 80038d0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80038d4:	2f19      	cmp	r7, #25
 80038d6:	d801      	bhi.n	80038dc <_strtol_l.constprop.0+0xb4>
 80038d8:	3c37      	subs	r4, #55	@ 0x37
 80038da:	e7de      	b.n	800389a <_strtol_l.constprop.0+0x72>
 80038dc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80038e0:	2f19      	cmp	r7, #25
 80038e2:	d804      	bhi.n	80038ee <_strtol_l.constprop.0+0xc6>
 80038e4:	3c57      	subs	r4, #87	@ 0x57
 80038e6:	e7d8      	b.n	800389a <_strtol_l.constprop.0+0x72>
 80038e8:	f04f 32ff 	mov.w	r2, #4294967295
 80038ec:	e7e1      	b.n	80038b2 <_strtol_l.constprop.0+0x8a>
 80038ee:	1c53      	adds	r3, r2, #1
 80038f0:	d108      	bne.n	8003904 <_strtol_l.constprop.0+0xdc>
 80038f2:	2322      	movs	r3, #34	@ 0x22
 80038f4:	f8ce 3000 	str.w	r3, [lr]
 80038f8:	4660      	mov	r0, ip
 80038fa:	f1b8 0f00 	cmp.w	r8, #0
 80038fe:	d0a0      	beq.n	8003842 <_strtol_l.constprop.0+0x1a>
 8003900:	1e69      	subs	r1, r5, #1
 8003902:	e006      	b.n	8003912 <_strtol_l.constprop.0+0xea>
 8003904:	b106      	cbz	r6, 8003908 <_strtol_l.constprop.0+0xe0>
 8003906:	4240      	negs	r0, r0
 8003908:	f1b8 0f00 	cmp.w	r8, #0
 800390c:	d099      	beq.n	8003842 <_strtol_l.constprop.0+0x1a>
 800390e:	2a00      	cmp	r2, #0
 8003910:	d1f6      	bne.n	8003900 <_strtol_l.constprop.0+0xd8>
 8003912:	f8c8 1000 	str.w	r1, [r8]
 8003916:	e794      	b.n	8003842 <_strtol_l.constprop.0+0x1a>
 8003918:	080039fd 	.word	0x080039fd

0800391c <strtol>:
 800391c:	4613      	mov	r3, r2
 800391e:	460a      	mov	r2, r1
 8003920:	4601      	mov	r1, r0
 8003922:	4802      	ldr	r0, [pc, #8]	@ (800392c <strtol+0x10>)
 8003924:	6800      	ldr	r0, [r0, #0]
 8003926:	f7ff bf7f 	b.w	8003828 <_strtol_l.constprop.0>
 800392a:	bf00      	nop
 800392c:	2000006c 	.word	0x2000006c

08003930 <memset>:
 8003930:	4402      	add	r2, r0
 8003932:	4603      	mov	r3, r0
 8003934:	4293      	cmp	r3, r2
 8003936:	d100      	bne.n	800393a <memset+0xa>
 8003938:	4770      	bx	lr
 800393a:	f803 1b01 	strb.w	r1, [r3], #1
 800393e:	e7f9      	b.n	8003934 <memset+0x4>

08003940 <__errno>:
 8003940:	4b01      	ldr	r3, [pc, #4]	@ (8003948 <__errno+0x8>)
 8003942:	6818      	ldr	r0, [r3, #0]
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	2000006c 	.word	0x2000006c

0800394c <__libc_init_array>:
 800394c:	b570      	push	{r4, r5, r6, lr}
 800394e:	4d0d      	ldr	r5, [pc, #52]	@ (8003984 <__libc_init_array+0x38>)
 8003950:	4c0d      	ldr	r4, [pc, #52]	@ (8003988 <__libc_init_array+0x3c>)
 8003952:	1b64      	subs	r4, r4, r5
 8003954:	10a4      	asrs	r4, r4, #2
 8003956:	2600      	movs	r6, #0
 8003958:	42a6      	cmp	r6, r4
 800395a:	d109      	bne.n	8003970 <__libc_init_array+0x24>
 800395c:	4d0b      	ldr	r5, [pc, #44]	@ (800398c <__libc_init_array+0x40>)
 800395e:	4c0c      	ldr	r4, [pc, #48]	@ (8003990 <__libc_init_array+0x44>)
 8003960:	f000 f820 	bl	80039a4 <_init>
 8003964:	1b64      	subs	r4, r4, r5
 8003966:	10a4      	asrs	r4, r4, #2
 8003968:	2600      	movs	r6, #0
 800396a:	42a6      	cmp	r6, r4
 800396c:	d105      	bne.n	800397a <__libc_init_array+0x2e>
 800396e:	bd70      	pop	{r4, r5, r6, pc}
 8003970:	f855 3b04 	ldr.w	r3, [r5], #4
 8003974:	4798      	blx	r3
 8003976:	3601      	adds	r6, #1
 8003978:	e7ee      	b.n	8003958 <__libc_init_array+0xc>
 800397a:	f855 3b04 	ldr.w	r3, [r5], #4
 800397e:	4798      	blx	r3
 8003980:	3601      	adds	r6, #1
 8003982:	e7f2      	b.n	800396a <__libc_init_array+0x1e>
 8003984:	08003b08 	.word	0x08003b08
 8003988:	08003b08 	.word	0x08003b08
 800398c:	08003b08 	.word	0x08003b08
 8003990:	08003b0c 	.word	0x08003b0c

08003994 <strcpy>:
 8003994:	4603      	mov	r3, r0
 8003996:	f811 2b01 	ldrb.w	r2, [r1], #1
 800399a:	f803 2b01 	strb.w	r2, [r3], #1
 800399e:	2a00      	cmp	r2, #0
 80039a0:	d1f9      	bne.n	8003996 <strcpy+0x2>
 80039a2:	4770      	bx	lr

080039a4 <_init>:
 80039a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a6:	bf00      	nop
 80039a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039aa:	bc08      	pop	{r3}
 80039ac:	469e      	mov	lr, r3
 80039ae:	4770      	bx	lr

080039b0 <_fini>:
 80039b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b2:	bf00      	nop
 80039b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039b6:	bc08      	pop	{r3}
 80039b8:	469e      	mov	lr, r3
 80039ba:	4770      	bx	lr
